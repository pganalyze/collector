syntax = "proto3";

import "shared.proto";

package pganalyze.collector;
option go_package = "github.com/pganalyze/collector/output/pganalyze_collector";

message ServerMessage {
  oneof message {
    // Collector configuration
    Config config = 1;
    // Server request to pause collection of data (e.g. in case of duplicate collectors)
    Pause pause = 2;
    // Request for the collector to run a query on behalf of a user
    QueryRun query_run = 3;
  }

  message Config {
    string server_id = 1;
    string server_url = 2;
    string sentry_dsn = 3;
    Features features = 4;
    bool enable_activity = 5;
    bool enable_logs = 6;
    // Maximum number of tables that can be monitored per server
    int32 schema_table_limit = 7;
  }

  message Features {
    // How often the collector should run pg_stat_statements_reset()
    int32 statement_reset_frequency = 1;
    // Statement timeout for all SQL statements sent to the database (defaults to 30s)
    int32 statement_timeout_ms = 2;
    // Statement timeout for pg_stat_statements query text requests (defaults to 120s)
    int32 statement_timeout_ms_query_text = 3;
  }

  message Pause {
    bool pause = 1;
  }

  message QueryRun {
    int64 id = 1;
    QueryRunType type = 2;
    string database_name = 3;
    string query_text = 4;
    repeated NullString query_parameters = 5;
    repeated string query_parameter_types = 6;
    map<string, string> postgres_settings = 7;
  }
}
