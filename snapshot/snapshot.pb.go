// Code generated by protoc-gen-go.
// source: snapshot/snapshot.proto
// DO NOT EDIT!

/*
Package snapshot is a generated protocol buffer package.

It is generated from these files:
	snapshot/snapshot.proto

It has these top-level messages:
	NullString
	NullInt64
	NullDouble
	NullTimestamp
	Snapshot
	SnapshotOpts
	SnapshotPostgres
	System
	Storage
	Scheduler
	LogLine
	Explain
	Setting
	Function
	Relation
	StoragePerfdata
	Network
	CPU
	Memory
	PostgresVersion
	Activity
	AmazonRdsInfo
	RdsOsSnapshot
	RdsOsCPUUtilization
	RdsOsLoadAverageMinute
	RdsOsMemory
	RdsOsTasks
	RdsOsSwap
	RdsOsDiskIO
*/
package snapshot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type SystemType int32

const (
	SystemType_PHYSICAL_SYSTEM   SystemType = 0
	SystemType_VIRTUAL_SYSTEM    SystemType = 1
	SystemType_AMAZON_RDS_SYSTEM SystemType = 2
	SystemType_HEROKU_SYSTEM     SystemType = 3
)

var SystemType_name = map[int32]string{
	0: "PHYSICAL_SYSTEM",
	1: "VIRTUAL_SYSTEM",
	2: "AMAZON_RDS_SYSTEM",
	3: "HEROKU_SYSTEM",
}
var SystemType_value = map[string]int32{
	"PHYSICAL_SYSTEM":   0,
	"VIRTUAL_SYSTEM":    1,
	"AMAZON_RDS_SYSTEM": 2,
	"HEROKU_SYSTEM":     3,
}

func (x SystemType) String() string {
	return proto.EnumName(SystemType_name, int32(x))
}
func (SystemType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LogLine_SourceType int32

const (
	LogLine_PostgresSource  LogLine_SourceType = 0
	LogLine_AmazonRdsSource LogLine_SourceType = 1
)

var LogLine_SourceType_name = map[int32]string{
	0: "PostgresSource",
	1: "AmazonRdsSource",
}
var LogLine_SourceType_value = map[string]int32{
	"PostgresSource":  0,
	"AmazonRdsSource": 1,
}

func (x LogLine_SourceType) String() string {
	return proto.EnumName(LogLine_SourceType_name, int32(x))
}
func (LogLine_SourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

type NullString struct {
	Valid bool   `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *NullString) Reset()                    { *m = NullString{} }
func (m *NullString) String() string            { return proto.CompactTextString(m) }
func (*NullString) ProtoMessage()               {}
func (*NullString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NullInt64 struct {
	Valid bool  `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Value int64 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *NullInt64) Reset()                    { *m = NullInt64{} }
func (m *NullInt64) String() string            { return proto.CompactTextString(m) }
func (*NullInt64) ProtoMessage()               {}
func (*NullInt64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NullDouble struct {
	Valid bool    `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *NullDouble) Reset()                    { *m = NullDouble{} }
func (m *NullDouble) String() string            { return proto.CompactTextString(m) }
func (*NullDouble) ProtoMessage()               {}
func (*NullDouble) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type NullTimestamp struct {
	Valid bool  `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Value int64 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *NullTimestamp) Reset()                    { *m = NullTimestamp{} }
func (m *NullTimestamp) String() string            { return proto.CompactTextString(m) }
func (*NullTimestamp) ProtoMessage()               {}
func (*NullTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Snapshot struct {
	Backends []*Activity `protobuf:"bytes,1,rep,name=backends" json:"backends,omitempty"`
	// Statements    []Statement      `msg:"queries"`
	Postgres *SnapshotPostgres `protobuf:"bytes,3,opt,name=postgres" json:"postgres,omitempty"`
	System   *System           `protobuf:"bytes,4,opt,name=system" json:"system,omitempty"`
	Logs     []*LogLine        `protobuf:"bytes,5,rep,name=logs" json:"logs,omitempty"`
	Explains []*Explain        `protobuf:"bytes,6,rep,name=explains" json:"explains,omitempty"`
	Opts     *SnapshotOpts     `protobuf:"bytes,7,opt,name=opts" json:"opts,omitempty"`
}

func (m *Snapshot) Reset()                    { *m = Snapshot{} }
func (m *Snapshot) String() string            { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()               {}
func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Snapshot) GetBackends() []*Activity {
	if m != nil {
		return m.Backends
	}
	return nil
}

func (m *Snapshot) GetPostgres() *SnapshotPostgres {
	if m != nil {
		return m.Postgres
	}
	return nil
}

func (m *Snapshot) GetSystem() *System {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Snapshot) GetLogs() []*LogLine {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *Snapshot) GetExplains() []*Explain {
	if m != nil {
		return m.Explains
	}
	return nil
}

func (m *Snapshot) GetOpts() *SnapshotOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

type SnapshotOpts struct {
	StatementStatsAreDiffed        bool `protobuf:"varint,1,opt,name=statement_stats_are_diffed,json=statementStatsAreDiffed" json:"statement_stats_are_diffed,omitempty"`
	PostgresRelationStatsAreDiffed bool `protobuf:"varint,2,opt,name=postgres_relation_stats_are_diffed,json=postgresRelationStatsAreDiffed" json:"postgres_relation_stats_are_diffed,omitempty"`
}

func (m *SnapshotOpts) Reset()                    { *m = SnapshotOpts{} }
func (m *SnapshotOpts) String() string            { return proto.CompactTextString(m) }
func (*SnapshotOpts) ProtoMessage()               {}
func (*SnapshotOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type SnapshotPostgres struct {
	Relations []*Relation      `protobuf:"bytes,1,rep,name=relations" json:"relations,omitempty"`
	Settings  []*Setting       `protobuf:"bytes,2,rep,name=settings" json:"settings,omitempty"`
	Functions []*Function      `protobuf:"bytes,3,rep,name=functions" json:"functions,omitempty"`
	Version   *PostgresVersion `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
}

func (m *SnapshotPostgres) Reset()                    { *m = SnapshotPostgres{} }
func (m *SnapshotPostgres) String() string            { return proto.CompactTextString(m) }
func (*SnapshotPostgres) ProtoMessage()               {}
func (*SnapshotPostgres) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SnapshotPostgres) GetRelations() []*Relation {
	if m != nil {
		return m.Relations
	}
	return nil
}

func (m *SnapshotPostgres) GetSettings() []*Setting {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *SnapshotPostgres) GetFunctions() []*Function {
	if m != nil {
		return m.Functions
	}
	return nil
}

func (m *SnapshotPostgres) GetVersion() *PostgresVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

type System struct {
	SystemType SystemType `protobuf:"varint,1,opt,name=system_type,json=systemType,enum=snapshot.SystemType" json:"system_type,omitempty"`
	// Types that are valid to be assigned to SystemInfo:
	//	*System_AmazonRdsInfo
	SystemInfo isSystem_SystemInfo `protobuf_oneof:"system_info"`
	Cpu        *CPU                `protobuf:"bytes,3,opt,name=cpu" json:"cpu,omitempty"`
	Memory     *Memory             `protobuf:"bytes,4,opt,name=memory" json:"memory,omitempty"`
	Storage    []*Storage          `protobuf:"bytes,5,rep,name=storage" json:"storage,omitempty"`
	Network    *Network            `protobuf:"bytes,6,opt,name=network" json:"network,omitempty"`
	Scheduler  *Scheduler          `protobuf:"bytes,7,opt,name=scheduler" json:"scheduler,omitempty"`
}

func (m *System) Reset()                    { *m = System{} }
func (m *System) String() string            { return proto.CompactTextString(m) }
func (*System) ProtoMessage()               {}
func (*System) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isSystem_SystemInfo interface {
	isSystem_SystemInfo()
}

type System_AmazonRdsInfo struct {
	AmazonRdsInfo *AmazonRdsInfo `protobuf:"bytes,2,opt,name=amazon_rds_info,json=amazonRdsInfo,oneof"`
}

func (*System_AmazonRdsInfo) isSystem_SystemInfo() {}

func (m *System) GetSystemInfo() isSystem_SystemInfo {
	if m != nil {
		return m.SystemInfo
	}
	return nil
}

func (m *System) GetAmazonRdsInfo() *AmazonRdsInfo {
	if x, ok := m.GetSystemInfo().(*System_AmazonRdsInfo); ok {
		return x.AmazonRdsInfo
	}
	return nil
}

func (m *System) GetCpu() *CPU {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *System) GetMemory() *Memory {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *System) GetStorage() []*Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *System) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *System) GetScheduler() *Scheduler {
	if m != nil {
		return m.Scheduler
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*System) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _System_OneofMarshaler, _System_OneofUnmarshaler, _System_OneofSizer, []interface{}{
		(*System_AmazonRdsInfo)(nil),
	}
}

func _System_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*System)
	// system_info
	switch x := m.SystemInfo.(type) {
	case *System_AmazonRdsInfo:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AmazonRdsInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("System.SystemInfo has unexpected type %T", x)
	}
	return nil
}

func _System_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*System)
	switch tag {
	case 2: // system_info.amazon_rds_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AmazonRdsInfo)
		err := b.DecodeMessage(msg)
		m.SystemInfo = &System_AmazonRdsInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _System_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*System)
	// system_info
	switch x := m.SystemInfo.(type) {
	case *System_AmazonRdsInfo:
		s := proto.Size(x.AmazonRdsInfo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Storage struct {
	BytesAvailable int64            `protobuf:"varint,1,opt,name=bytes_available,json=bytesAvailable" json:"bytes_available,omitempty"`
	BytesTotal     int64            `protobuf:"varint,2,opt,name=bytes_total,json=bytesTotal" json:"bytes_total,omitempty"`
	Mountpoint     string           `protobuf:"bytes,3,opt,name=mountpoint" json:"mountpoint,omitempty"`
	Name           string           `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Path           string           `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	Perfdata       *StoragePerfdata `protobuf:"bytes,6,opt,name=perfdata" json:"perfdata,omitempty"`
}

func (m *Storage) Reset()                    { *m = Storage{} }
func (m *Storage) String() string            { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()               {}
func (*Storage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Storage) GetPerfdata() *StoragePerfdata {
	if m != nil {
		return m.Perfdata
	}
	return nil
}

type Scheduler struct {
	ContextSwitches int64   `protobuf:"varint,1,opt,name=context_switches,json=contextSwitches" json:"context_switches,omitempty"`
	Interrupts      int64   `protobuf:"varint,2,opt,name=interrupts" json:"interrupts,omitempty"`
	Loadavg_1Min    float64 `protobuf:"fixed64,3,opt,name=loadavg_1min,json=loadavg1min" json:"loadavg_1min,omitempty"`
	Loadavg_5Min    float64 `protobuf:"fixed64,4,opt,name=loadavg_5min,json=loadavg5min" json:"loadavg_5min,omitempty"`
	Loadavg_15Min   float64 `protobuf:"fixed64,5,opt,name=loadavg_15min,json=loadavg15min" json:"loadavg_15min,omitempty"`
	ProcsBlocked    int64   `protobuf:"varint,6,opt,name=procs_blocked,json=procsBlocked" json:"procs_blocked,omitempty"`
	ProcsCreated    int64   `protobuf:"varint,7,opt,name=procs_created,json=procsCreated" json:"procs_created,omitempty"`
	ProcsRunning    int64   `protobuf:"varint,8,opt,name=procs_running,json=procsRunning" json:"procs_running,omitempty"`
}

func (m *Scheduler) Reset()                    { *m = Scheduler{} }
func (m *Scheduler) String() string            { return proto.CompactTextString(m) }
func (*Scheduler) ProtoMessage()               {}
func (*Scheduler) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type LogLine struct {
	OccurredAt      int64              `protobuf:"varint,1,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	Source          LogLine_SourceType `protobuf:"varint,2,opt,name=source,enum=snapshot.LogLine_SourceType" json:"source,omitempty"`
	ClientIp        *NullString        `protobuf:"bytes,3,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	LogLevel        string             `protobuf:"bytes,4,opt,name=log_level,json=logLevel" json:"log_level,omitempty"`
	BackendPid      int32              `protobuf:"varint,5,opt,name=backend_pid,json=backendPid" json:"backend_pid,omitempty"`
	Content         string             `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	AdditionalLines []*LogLine         `protobuf:"bytes,7,rep,name=additional_lines,json=additionalLines" json:"additional_lines,omitempty"`
}

func (m *LogLine) Reset()                    { *m = LogLine{} }
func (m *LogLine) String() string            { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()               {}
func (*LogLine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *LogLine) GetClientIp() *NullString {
	if m != nil {
		return m.ClientIp
	}
	return nil
}

func (m *LogLine) GetAdditionalLines() []*LogLine {
	if m != nil {
		return m.AdditionalLines
	}
	return nil
}

type Explain struct {
	OccurredAt      int64       `protobuf:"varint,1,opt,name=occurred_at,json=occurredAt" json:"occurred_at,omitempty"`
	NormalizedQuery string      `protobuf:"bytes,2,opt,name=normalized_query,json=normalizedQuery" json:"normalized_query,omitempty"`
	Runtime         float64     `protobuf:"fixed64,3,opt,name=runtime" json:"runtime,omitempty"`
	ExplainOutput   string      `protobuf:"bytes,4,opt,name=explain_output,json=explainOutput" json:"explain_output,omitempty"`
	ExplainError    *NullString `protobuf:"bytes,5,opt,name=explain_error,json=explainError" json:"explain_error,omitempty"`
}

func (m *Explain) Reset()                    { *m = Explain{} }
func (m *Explain) String() string            { return proto.CompactTextString(m) }
func (*Explain) ProtoMessage()               {}
func (*Explain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Explain) GetExplainError() *NullString {
	if m != nil {
		return m.ExplainError
	}
	return nil
}

type Setting struct {
	Name         string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CurrentValue string      `protobuf:"bytes,2,opt,name=current_value,json=currentValue" json:"current_value,omitempty"`
	Unit         *NullString `protobuf:"bytes,3,opt,name=unit" json:"unit,omitempty"`
	BootValue    *NullString `protobuf:"bytes,4,opt,name=boot_value,json=bootValue" json:"boot_value,omitempty"`
	ResetValue   *NullString `protobuf:"bytes,5,opt,name=reset_value,json=resetValue" json:"reset_value,omitempty"`
	Source       *NullString `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	SourceFile   *NullString `protobuf:"bytes,7,opt,name=source_file,json=sourceFile" json:"source_file,omitempty"`
	SourceLine   *NullString `protobuf:"bytes,8,opt,name=source_line,json=sourceLine" json:"source_line,omitempty"`
}

func (m *Setting) Reset()                    { *m = Setting{} }
func (m *Setting) String() string            { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()               {}
func (*Setting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Setting) GetUnit() *NullString {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Setting) GetBootValue() *NullString {
	if m != nil {
		return m.BootValue
	}
	return nil
}

func (m *Setting) GetResetValue() *NullString {
	if m != nil {
		return m.ResetValue
	}
	return nil
}

func (m *Setting) GetSource() *NullString {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Setting) GetSourceFile() *NullString {
	if m != nil {
		return m.SourceFile
	}
	return nil
}

func (m *Setting) GetSourceLine() *NullString {
	if m != nil {
		return m.SourceLine
	}
	return nil
}

type Function struct {
	SchemaName      string      `protobuf:"bytes,1,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	FunctionName    string      `protobuf:"bytes,2,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	Language        string      `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Source          string      `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	SourceBin       string      `protobuf:"bytes,5,opt,name=source_bin,json=sourceBin" json:"source_bin,omitempty"`
	Config          *NullString `protobuf:"bytes,6,opt,name=config" json:"config,omitempty"`
	Arguments       string      `protobuf:"bytes,7,opt,name=arguments" json:"arguments,omitempty"`
	Result          string      `protobuf:"bytes,8,opt,name=result" json:"result,omitempty"`
	Aggregate       bool        `protobuf:"varint,9,opt,name=aggregate" json:"aggregate,omitempty"`
	Window          bool        `protobuf:"varint,10,opt,name=window" json:"window,omitempty"`
	SecurityDefiner bool        `protobuf:"varint,11,opt,name=security_definer,json=securityDefiner" json:"security_definer,omitempty"`
	Leakproof       bool        `protobuf:"varint,12,opt,name=leakproof" json:"leakproof,omitempty"`
	Strict          bool        `protobuf:"varint,13,opt,name=strict" json:"strict,omitempty"`
	ReturnsSet      bool        `protobuf:"varint,14,opt,name=returns_set,json=returnsSet" json:"returns_set,omitempty"`
	Volatile        string      `protobuf:"bytes,15,opt,name=volatile" json:"volatile,omitempty"`
	Calls           *NullInt64  `protobuf:"bytes,16,opt,name=calls" json:"calls,omitempty"`
	TotalTime       *NullDouble `protobuf:"bytes,17,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	SelfTime        *NullDouble `protobuf:"bytes,18,opt,name=self_time,json=selfTime" json:"self_time,omitempty"`
}

func (m *Function) Reset()                    { *m = Function{} }
func (m *Function) String() string            { return proto.CompactTextString(m) }
func (*Function) ProtoMessage()               {}
func (*Function) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Function) GetConfig() *NullString {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Function) GetCalls() *NullInt64 {
	if m != nil {
		return m.Calls
	}
	return nil
}

func (m *Function) GetTotalTime() *NullDouble {
	if m != nil {
		return m.TotalTime
	}
	return nil
}

func (m *Function) GetSelfTime() *NullDouble {
	if m != nil {
		return m.SelfTime
	}
	return nil
}

type Relation struct {
	Oid            int64                  `protobuf:"varint,1,opt,name=oid" json:"oid,omitempty"`
	SchemaName     string                 `protobuf:"bytes,2,opt,name=schema_name,json=schemaName" json:"schema_name,omitempty"`
	TableName      string                 `protobuf:"bytes,3,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	RelationType   string                 `protobuf:"bytes,4,opt,name=relation_type,json=relationType" json:"relation_type,omitempty"`
	Stats          *Relation_Stats        `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
	Columns        []*Relation_Column     `protobuf:"bytes,7,rep,name=columns" json:"columns,omitempty"`
	Indices        []*Relation_Index      `protobuf:"bytes,8,rep,name=indices" json:"indices,omitempty"`
	Constraints    []*Relation_Constraint `protobuf:"bytes,9,rep,name=constraints" json:"constraints,omitempty"`
	ViewDefinition string                 `protobuf:"bytes,10,opt,name=view_definition,json=viewDefinition" json:"view_definition,omitempty"`
}

func (m *Relation) Reset()                    { *m = Relation{} }
func (m *Relation) String() string            { return proto.CompactTextString(m) }
func (*Relation) ProtoMessage()               {}
func (*Relation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Relation) GetStats() *Relation_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Relation) GetColumns() []*Relation_Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *Relation) GetIndices() []*Relation_Index {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *Relation) GetConstraints() []*Relation_Constraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type Relation_Column struct {
	RelationOid  int64       `protobuf:"varint,1,opt,name=relation_oid,json=relationOid" json:"relation_oid,omitempty"`
	Name         string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DataType     string      `protobuf:"bytes,3,opt,name=data_type,json=dataType" json:"data_type,omitempty"`
	DefaultValue *NullString `protobuf:"bytes,4,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	NotNull      bool        `protobuf:"varint,5,opt,name=not_null,json=notNull" json:"not_null,omitempty"`
	Position     int64       `protobuf:"varint,6,opt,name=position" json:"position,omitempty"`
}

func (m *Relation_Column) Reset()                    { *m = Relation_Column{} }
func (m *Relation_Column) String() string            { return proto.CompactTextString(m) }
func (*Relation_Column) ProtoMessage()               {}
func (*Relation_Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

func (m *Relation_Column) GetDefaultValue() *NullString {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

type Relation_Stats struct {
	SizeBytes        int64          `protobuf:"varint,1,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	WastedBytes      int64          `protobuf:"varint,2,opt,name=wasted_bytes,json=wastedBytes" json:"wasted_bytes,omitempty"`
	SeqScan          int64          `protobuf:"varint,3,opt,name=seq_scan,json=seqScan" json:"seq_scan,omitempty"`
	SeqTupRead       int64          `protobuf:"varint,4,opt,name=seq_tup_read,json=seqTupRead" json:"seq_tup_read,omitempty"`
	IdxScan          int64          `protobuf:"varint,5,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	IdxTupFetch      int64          `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch" json:"idx_tup_fetch,omitempty"`
	NTupIns          int64          `protobuf:"varint,7,opt,name=n_tup_ins,json=nTupIns" json:"n_tup_ins,omitempty"`
	NTupUpd          int64          `protobuf:"varint,8,opt,name=n_tup_upd,json=nTupUpd" json:"n_tup_upd,omitempty"`
	NTupDel          int64          `protobuf:"varint,9,opt,name=n_tup_del,json=nTupDel" json:"n_tup_del,omitempty"`
	NTupHotUpd       int64          `protobuf:"varint,10,opt,name=n_tup_hot_upd,json=nTupHotUpd" json:"n_tup_hot_upd,omitempty"`
	NLiveTup         int64          `protobuf:"varint,11,opt,name=n_live_tup,json=nLiveTup" json:"n_live_tup,omitempty"`
	NDeadTup         int64          `protobuf:"varint,12,opt,name=n_dead_tup,json=nDeadTup" json:"n_dead_tup,omitempty"`
	NModSinceAnalyze *NullInt64     `protobuf:"bytes,13,opt,name=n_mod_since_analyze,json=nModSinceAnalyze" json:"n_mod_since_analyze,omitempty"`
	LastVacuum       *NullTimestamp `protobuf:"bytes,14,opt,name=last_vacuum,json=lastVacuum" json:"last_vacuum,omitempty"`
	LastAutovacuum   *NullTimestamp `protobuf:"bytes,15,opt,name=last_autovacuum,json=lastAutovacuum" json:"last_autovacuum,omitempty"`
	LastAnalyze      *NullTimestamp `protobuf:"bytes,16,opt,name=last_analyze,json=lastAnalyze" json:"last_analyze,omitempty"`
	LastAutoanalyze  *NullTimestamp `protobuf:"bytes,17,opt,name=last_autoanalyze,json=lastAutoanalyze" json:"last_autoanalyze,omitempty"`
	VacuumCount      int64          `protobuf:"varint,18,opt,name=vacuum_count,json=vacuumCount" json:"vacuum_count,omitempty"`
	AutovacuumCount  int64          `protobuf:"varint,19,opt,name=autovacuum_count,json=autovacuumCount" json:"autovacuum_count,omitempty"`
	AnalyzeCount     int64          `protobuf:"varint,20,opt,name=analyze_count,json=analyzeCount" json:"analyze_count,omitempty"`
	AutoanalyzeCount int64          `protobuf:"varint,21,opt,name=autoanalyze_count,json=autoanalyzeCount" json:"autoanalyze_count,omitempty"`
	HeapBlksRead     *NullInt64     `protobuf:"bytes,22,opt,name=heap_blks_read,json=heapBlksRead" json:"heap_blks_read,omitempty"`
	HeapBlksHit      *NullInt64     `protobuf:"bytes,23,opt,name=heap_blks_hit,json=heapBlksHit" json:"heap_blks_hit,omitempty"`
	IdxBlksRead      *NullInt64     `protobuf:"bytes,24,opt,name=idx_blks_read,json=idxBlksRead" json:"idx_blks_read,omitempty"`
	IdxBlksHit       *NullInt64     `protobuf:"bytes,25,opt,name=idx_blks_hit,json=idxBlksHit" json:"idx_blks_hit,omitempty"`
	ToastBlksRead    *NullInt64     `protobuf:"bytes,26,opt,name=toast_blks_read,json=toastBlksRead" json:"toast_blks_read,omitempty"`
	ToastBlksHit     *NullInt64     `protobuf:"bytes,27,opt,name=toast_blks_hit,json=toastBlksHit" json:"toast_blks_hit,omitempty"`
	TidxBlksRead     *NullInt64     `protobuf:"bytes,28,opt,name=tidx_blks_read,json=tidxBlksRead" json:"tidx_blks_read,omitempty"`
	TidxBlksHit      *NullInt64     `protobuf:"bytes,29,opt,name=tidx_blks_hit,json=tidxBlksHit" json:"tidx_blks_hit,omitempty"`
}

func (m *Relation_Stats) Reset()                    { *m = Relation_Stats{} }
func (m *Relation_Stats) String() string            { return proto.CompactTextString(m) }
func (*Relation_Stats) ProtoMessage()               {}
func (*Relation_Stats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 1} }

func (m *Relation_Stats) GetNModSinceAnalyze() *NullInt64 {
	if m != nil {
		return m.NModSinceAnalyze
	}
	return nil
}

func (m *Relation_Stats) GetLastVacuum() *NullTimestamp {
	if m != nil {
		return m.LastVacuum
	}
	return nil
}

func (m *Relation_Stats) GetLastAutovacuum() *NullTimestamp {
	if m != nil {
		return m.LastAutovacuum
	}
	return nil
}

func (m *Relation_Stats) GetLastAnalyze() *NullTimestamp {
	if m != nil {
		return m.LastAnalyze
	}
	return nil
}

func (m *Relation_Stats) GetLastAutoanalyze() *NullTimestamp {
	if m != nil {
		return m.LastAutoanalyze
	}
	return nil
}

func (m *Relation_Stats) GetHeapBlksRead() *NullInt64 {
	if m != nil {
		return m.HeapBlksRead
	}
	return nil
}

func (m *Relation_Stats) GetHeapBlksHit() *NullInt64 {
	if m != nil {
		return m.HeapBlksHit
	}
	return nil
}

func (m *Relation_Stats) GetIdxBlksRead() *NullInt64 {
	if m != nil {
		return m.IdxBlksRead
	}
	return nil
}

func (m *Relation_Stats) GetIdxBlksHit() *NullInt64 {
	if m != nil {
		return m.IdxBlksHit
	}
	return nil
}

func (m *Relation_Stats) GetToastBlksRead() *NullInt64 {
	if m != nil {
		return m.ToastBlksRead
	}
	return nil
}

func (m *Relation_Stats) GetToastBlksHit() *NullInt64 {
	if m != nil {
		return m.ToastBlksHit
	}
	return nil
}

func (m *Relation_Stats) GetTidxBlksRead() *NullInt64 {
	if m != nil {
		return m.TidxBlksRead
	}
	return nil
}

func (m *Relation_Stats) GetTidxBlksHit() *NullInt64 {
	if m != nil {
		return m.TidxBlksHit
	}
	return nil
}

type Relation_Index struct {
	RelationOid   int64       `protobuf:"varint,1,opt,name=relation_oid,json=relationOid" json:"relation_oid,omitempty"`
	IndexOid      int64       `protobuf:"varint,2,opt,name=index_oid,json=indexOid" json:"index_oid,omitempty"`
	Columns       string      `protobuf:"bytes,3,opt,name=columns" json:"columns,omitempty"`
	Name          string      `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	SizeBytes     int64       `protobuf:"varint,5,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	WastedBytes   int64       `protobuf:"varint,6,opt,name=wasted_bytes,json=wastedBytes" json:"wasted_bytes,omitempty"`
	IsPrimary     bool        `protobuf:"varint,7,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
	IsUnique      bool        `protobuf:"varint,8,opt,name=is_unique,json=isUnique" json:"is_unique,omitempty"`
	IsValid       bool        `protobuf:"varint,9,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	IndexDef      string      `protobuf:"bytes,10,opt,name=index_def,json=indexDef" json:"index_def,omitempty"`
	ConstraintDef *NullString `protobuf:"bytes,11,opt,name=constraint_def,json=constraintDef" json:"constraint_def,omitempty"`
	IdxScan       int64       `protobuf:"varint,12,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	IdxTupRead    int64       `protobuf:"varint,13,opt,name=idx_tup_read,json=idxTupRead" json:"idx_tup_read,omitempty"`
	IdxTupFetch   int64       `protobuf:"varint,14,opt,name=idx_tup_fetch,json=idxTupFetch" json:"idx_tup_fetch,omitempty"`
	IdxBlksRead   int64       `protobuf:"varint,15,opt,name=idx_blks_read,json=idxBlksRead" json:"idx_blks_read,omitempty"`
	IdxBlksHit    int64       `protobuf:"varint,16,opt,name=idx_blks_hit,json=idxBlksHit" json:"idx_blks_hit,omitempty"`
}

func (m *Relation_Index) Reset()                    { *m = Relation_Index{} }
func (m *Relation_Index) String() string            { return proto.CompactTextString(m) }
func (*Relation_Index) ProtoMessage()               {}
func (*Relation_Index) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 2} }

func (m *Relation_Index) GetConstraintDef() *NullString {
	if m != nil {
		return m.ConstraintDef
	}
	return nil
}

type Relation_Constraint struct {
	RelationOid    int64  `protobuf:"varint,1,opt,name=relation_oid,json=relationOid" json:"relation_oid,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ConstraintDef  string `protobuf:"bytes,3,opt,name=constraint_def,json=constraintDef" json:"constraint_def,omitempty"`
	Columns        string `protobuf:"bytes,4,opt,name=columns" json:"columns,omitempty"`
	ForeignSchema  string `protobuf:"bytes,5,opt,name=foreign_schema,json=foreignSchema" json:"foreign_schema,omitempty"`
	ForeignTable   string `protobuf:"bytes,6,opt,name=foreign_table,json=foreignTable" json:"foreign_table,omitempty"`
	ForeignColumns string `protobuf:"bytes,7,opt,name=foreign_columns,json=foreignColumns" json:"foreign_columns,omitempty"`
}

func (m *Relation_Constraint) Reset()                    { *m = Relation_Constraint{} }
func (m *Relation_Constraint) String() string            { return proto.CompactTextString(m) }
func (*Relation_Constraint) ProtoMessage()               {}
func (*Relation_Constraint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 3} }

type StoragePerfdata struct {
	// 0 = counters, raw data
	// 1 = diff, (only) useful data
	Version int64 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// Version 0/1
	RdIos      int64 `protobuf:"varint,2,opt,name=rd_ios,json=rdIos" json:"rd_ios,omitempty"`
	WrIos      int64 `protobuf:"varint,3,opt,name=wr_ios,json=wrIos" json:"wr_ios,omitempty"`
	IosInProg  int64 `protobuf:"varint,4,opt,name=ios_in_prog,json=iosInProg" json:"ios_in_prog,omitempty"`
	AvgReqSize int64 `protobuf:"varint,5,opt,name=avg_req_size,json=avgReqSize" json:"avg_req_size,omitempty"`
	// Version 1 only
	RdLatency    float64 `protobuf:"fixed64,6,opt,name=rd_latency,json=rdLatency" json:"rd_latency,omitempty"`
	RdThroughput int64   `protobuf:"varint,7,opt,name=rd_throughput,json=rdThroughput" json:"rd_throughput,omitempty"`
	WrLatency    float64 `protobuf:"fixed64,8,opt,name=wr_latency,json=wrLatency" json:"wr_latency,omitempty"`
	WrThroughput int64   `protobuf:"varint,9,opt,name=wr_throughput,json=wrThroughput" json:"wr_throughput,omitempty"`
	// Version 0 only
	RdMerges  int64 `protobuf:"varint,10,opt,name=rd_merges,json=rdMerges" json:"rd_merges,omitempty"`
	RdSectors int64 `protobuf:"varint,11,opt,name=rd_sectors,json=rdSectors" json:"rd_sectors,omitempty"`
	RdTicks   int64 `protobuf:"varint,12,opt,name=rd_ticks,json=rdTicks" json:"rd_ticks,omitempty"`
	WrMerges  int64 `protobuf:"varint,13,opt,name=wr_merges,json=wrMerges" json:"wr_merges,omitempty"`
	WrSectors int64 `protobuf:"varint,14,opt,name=wr_sectors,json=wrSectors" json:"wr_sectors,omitempty"`
	WrTicks   int64 `protobuf:"varint,15,opt,name=wr_ticks,json=wrTicks" json:"wr_ticks,omitempty"`
	TotTicks  int64 `protobuf:"varint,16,opt,name=tot_ticks,json=totTicks" json:"tot_ticks,omitempty"`
	RqTicks   int64 `protobuf:"varint,17,opt,name=rq_ticks,json=rqTicks" json:"rq_ticks,omitempty"`
}

func (m *StoragePerfdata) Reset()                    { *m = StoragePerfdata{} }
func (m *StoragePerfdata) String() string            { return proto.CompactTextString(m) }
func (*StoragePerfdata) ProtoMessage()               {}
func (*StoragePerfdata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type Network struct {
	ReceiveThroughput  int64 `protobuf:"varint,1,opt,name=receive_throughput,json=receiveThroughput" json:"receive_throughput,omitempty"`
	TransmitThroughput int64 `protobuf:"varint,2,opt,name=transmit_throughput,json=transmitThroughput" json:"transmit_throughput,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type CPU struct {
	Utilization            float64 `protobuf:"fixed64,1,opt,name=utilization" json:"utilization,omitempty"`
	BusyTimesGuestMsec     int64   `protobuf:"varint,2,opt,name=busy_times_guest_msec,json=busyTimesGuestMsec" json:"busy_times_guest_msec,omitempty"`
	BusyTimesGuestNiceMsec int64   `protobuf:"varint,3,opt,name=busy_times_guest_nice_msec,json=busyTimesGuestNiceMsec" json:"busy_times_guest_nice_msec,omitempty"`
	BusyTimesIdleMsec      int64   `protobuf:"varint,4,opt,name=busy_times_idle_msec,json=busyTimesIdleMsec" json:"busy_times_idle_msec,omitempty"`
	BusyTimesIowaitMsec    int64   `protobuf:"varint,5,opt,name=busy_times_iowait_msec,json=busyTimesIowaitMsec" json:"busy_times_iowait_msec,omitempty"`
	BusyTimesIrqMsec       int64   `protobuf:"varint,6,opt,name=busy_times_irq_msec,json=busyTimesIrqMsec" json:"busy_times_irq_msec,omitempty"`
	BusyTimesNiceMsec      int64   `protobuf:"varint,7,opt,name=busy_times_nice_msec,json=busyTimesNiceMsec" json:"busy_times_nice_msec,omitempty"`
	BusyTimesSoftirqMsec   int64   `protobuf:"varint,8,opt,name=busy_times_softirq_msec,json=busyTimesSoftirqMsec" json:"busy_times_softirq_msec,omitempty"`
	BusyTimesStealMsec     int64   `protobuf:"varint,9,opt,name=busy_times_steal_msec,json=busyTimesStealMsec" json:"busy_times_steal_msec,omitempty"`
	BusyTimesSystemMsec    int64   `protobuf:"varint,10,opt,name=busy_times_system_msec,json=busyTimesSystemMsec" json:"busy_times_system_msec,omitempty"`
	BusyTimesUserMsec      int64   `protobuf:"varint,11,opt,name=busy_times_user_msec,json=busyTimesUserMsec" json:"busy_times_user_msec,omitempty"`
	HardwareCacheSize      string  `protobuf:"bytes,12,opt,name=hardware_cache_size,json=hardwareCacheSize" json:"hardware_cache_size,omitempty"`
	HardwareModel          string  `protobuf:"bytes,13,opt,name=hardware_model,json=hardwareModel" json:"hardware_model,omitempty"`
	HardwareSockets        int64   `protobuf:"varint,14,opt,name=hardware_sockets,json=hardwareSockets" json:"hardware_sockets,omitempty"`
	HardwareCoresPerSocket int64   `protobuf:"varint,15,opt,name=hardware_cores_per_socket,json=hardwareCoresPerSocket" json:"hardware_cores_per_socket,omitempty"`
	HardwareSpeedMhz       float32 `protobuf:"fixed32,16,opt,name=hardware_speed_mhz,json=hardwareSpeedMhz" json:"hardware_speed_mhz,omitempty"`
}

func (m *CPU) Reset()                    { *m = CPU{} }
func (m *CPU) String() string            { return proto.CompactTextString(m) }
func (*CPU) ProtoMessage()               {}
func (*CPU) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type Memory struct {
	ApplicationsBytes int64 `protobuf:"varint,1,opt,name=applications_bytes,json=applicationsBytes" json:"applications_bytes,omitempty"`
	BuffersBytes      int64 `protobuf:"varint,2,opt,name=buffers_bytes,json=buffersBytes" json:"buffers_bytes,omitempty"`
	DirtyBytes        int64 `protobuf:"varint,3,opt,name=dirty_bytes,json=dirtyBytes" json:"dirty_bytes,omitempty"`
	FreeBytes         int64 `protobuf:"varint,4,opt,name=free_bytes,json=freeBytes" json:"free_bytes,omitempty"`
	PagecacheBytes    int64 `protobuf:"varint,5,opt,name=pagecache_bytes,json=pagecacheBytes" json:"pagecache_bytes,omitempty"`
	SwapFreeBytes     int64 `protobuf:"varint,6,opt,name=swap_free_bytes,json=swapFreeBytes" json:"swap_free_bytes,omitempty"`
	SwapTotalBytes    int64 `protobuf:"varint,7,opt,name=swap_total_bytes,json=swapTotalBytes" json:"swap_total_bytes,omitempty"`
	TotalBytes        int64 `protobuf:"varint,8,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	WritebackBytes    int64 `protobuf:"varint,9,opt,name=writeback_bytes,json=writebackBytes" json:"writeback_bytes,omitempty"`
	ActiveBytes       int64 `protobuf:"varint,10,opt,name=active_bytes,json=activeBytes" json:"active_bytes,omitempty"`
}

func (m *Memory) Reset()                    { *m = Memory{} }
func (m *Memory) String() string            { return proto.CompactTextString(m) }
func (*Memory) ProtoMessage()               {}
func (*Memory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type PostgresVersion struct {
	Full    string `protobuf:"bytes,1,opt,name=full" json:"full,omitempty"`
	Short   string `protobuf:"bytes,2,opt,name=short" json:"short,omitempty"`
	Numeric int64  `protobuf:"varint,3,opt,name=numeric" json:"numeric,omitempty"`
}

func (m *PostgresVersion) Reset()                    { *m = PostgresVersion{} }
func (m *PostgresVersion) String() string            { return proto.CompactTextString(m) }
func (*PostgresVersion) ProtoMessage()               {}
func (*PostgresVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type Activity struct {
	Pid             int64  `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Username        string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	ApplicationName string `protobuf:"bytes,3,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	ClientAddr      string `protobuf:"bytes,4,opt,name=client_addr,json=clientAddr" json:"client_addr,omitempty"`
	BackendStart    int64  `protobuf:"varint,5,opt,name=backend_start,json=backendStart" json:"backend_start,omitempty"`
	XactStart       int64  `protobuf:"varint,6,opt,name=xact_start,json=xactStart" json:"xact_start,omitempty"`
	QueryStart      int64  `protobuf:"varint,7,opt,name=query_start,json=queryStart" json:"query_start,omitempty"`
	StateChange     int64  `protobuf:"varint,8,opt,name=state_change,json=stateChange" json:"state_change,omitempty"`
	Waiting         bool   `protobuf:"varint,9,opt,name=waiting" json:"waiting,omitempty"`
	State           string `protobuf:"bytes,10,opt,name=state" json:"state,omitempty"`
	NormalizedQuery string `protobuf:"bytes,11,opt,name=normalized_query,json=normalizedQuery" json:"normalized_query,omitempty"`
}

func (m *Activity) Reset()                    { *m = Activity{} }
func (m *Activity) String() string            { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()               {}
func (*Activity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type AmazonRdsInfo struct {
	Region                     string         `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	InstanceClass              string         `protobuf:"bytes,2,opt,name=instance_class,json=instanceClass" json:"instance_class,omitempty"`
	InstanceId                 string         `protobuf:"bytes,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Status                     string         `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	AvailabilityZone           string         `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone" json:"availability_zone,omitempty"`
	PubliclyAccessible         bool           `protobuf:"varint,6,opt,name=publicly_accessible,json=publiclyAccessible" json:"publicly_accessible,omitempty"`
	MultiAz                    bool           `protobuf:"varint,7,opt,name=multi_az,json=multiAz" json:"multi_az,omitempty"`
	SecondaryAvailabilityZone  string         `protobuf:"bytes,8,opt,name=secondary_availability_zone,json=secondaryAvailabilityZone" json:"secondary_availability_zone,omitempty"`
	CaCertificate              string         `protobuf:"bytes,9,opt,name=ca_certificate,json=caCertificate" json:"ca_certificate,omitempty"`
	AutoMinorVersionUpgrade    bool           `protobuf:"varint,10,opt,name=auto_minor_version_upgrade,json=autoMinorVersionUpgrade" json:"auto_minor_version_upgrade,omitempty"`
	PreferredMaintenanceWindow string         `protobuf:"bytes,11,opt,name=preferred_maintenance_window,json=preferredMaintenanceWindow" json:"preferred_maintenance_window,omitempty"`
	LatestRestorableTime       int64          `protobuf:"varint,12,opt,name=latest_restorable_time,json=latestRestorableTime" json:"latest_restorable_time,omitempty"`
	PreferredBackupWindow      string         `protobuf:"bytes,13,opt,name=preferred_backup_window,json=preferredBackupWindow" json:"preferred_backup_window,omitempty"`
	BackupRetentionPeriod      int64          `protobuf:"varint,14,opt,name=backup_retention_period,json=backupRetentionPeriod" json:"backup_retention_period,omitempty"`
	MasterUsername             string         `protobuf:"bytes,15,opt,name=master_username,json=masterUsername" json:"master_username,omitempty"`
	InitialDbName              string         `protobuf:"bytes,16,opt,name=initial_db_name,json=initialDbName" json:"initial_db_name,omitempty"`
	CreatedAt                  int64          `protobuf:"varint,17,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	StorageProvisionedIops     int64          `protobuf:"varint,18,opt,name=storage_provisioned_iops,json=storageProvisionedIops" json:"storage_provisioned_iops,omitempty"`
	StorageEncrypted           bool           `protobuf:"varint,19,opt,name=storage_encrypted,json=storageEncrypted" json:"storage_encrypted,omitempty"`
	StorageType                string         `protobuf:"bytes,20,opt,name=storage_type,json=storageType" json:"storage_type,omitempty"`
	ParameterApplyStatus       string         `protobuf:"bytes,21,opt,name=parameter_apply_status,json=parameterApplyStatus" json:"parameter_apply_status,omitempty"`
	ParameterPgssEnabled       bool           `protobuf:"varint,22,opt,name=parameter_pgss_enabled,json=parameterPgssEnabled" json:"parameter_pgss_enabled,omitempty"`
	OsSnapshot                 *RdsOsSnapshot `protobuf:"bytes,23,opt,name=os_snapshot,json=osSnapshot" json:"os_snapshot,omitempty"`
}

func (m *AmazonRdsInfo) Reset()                    { *m = AmazonRdsInfo{} }
func (m *AmazonRdsInfo) String() string            { return proto.CompactTextString(m) }
func (*AmazonRdsInfo) ProtoMessage()               {}
func (*AmazonRdsInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *AmazonRdsInfo) GetOsSnapshot() *RdsOsSnapshot {
	if m != nil {
		return m.OsSnapshot
	}
	return nil
}

type RdsOsSnapshot struct {
	Engine             string                  `protobuf:"bytes,1,opt,name=engine" json:"engine,omitempty"`
	InstanceId         string                  `protobuf:"bytes,2,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	InstanceResourceId string                  `protobuf:"bytes,3,opt,name=instance_resource_id,json=instanceResourceId" json:"instance_resource_id,omitempty"`
	Timestamp          string                  `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Version            float32                 `protobuf:"fixed32,5,opt,name=version" json:"version,omitempty"`
	Uptime             string                  `protobuf:"bytes,6,opt,name=uptime" json:"uptime,omitempty"`
	NumCpus            int32                   `protobuf:"varint,7,opt,name=num_cpus,json=numCpus" json:"num_cpus,omitempty"`
	CpuUtilization     *RdsOsCPUUtilization    `protobuf:"bytes,8,opt,name=cpu_utilization,json=cpuUtilization" json:"cpu_utilization,omitempty"`
	LoadAverageMinute  *RdsOsLoadAverageMinute `protobuf:"bytes,9,opt,name=load_average_minute,json=loadAverageMinute" json:"load_average_minute,omitempty"`
	Memory             *RdsOsMemory            `protobuf:"bytes,10,opt,name=memory" json:"memory,omitempty"`
	Tasks              *RdsOsTasks             `protobuf:"bytes,11,opt,name=tasks" json:"tasks,omitempty"`
	Swap               *RdsOsSwap              `protobuf:"bytes,12,opt,name=swap" json:"swap,omitempty"`
	// Network           []RdsOsNetworkInterface `msg:"network"`
	DiskIo []*RdsOsDiskIO `protobuf:"bytes,14,rep,name=disk_io,json=diskIo" json:"disk_io,omitempty"`
}

func (m *RdsOsSnapshot) Reset()                    { *m = RdsOsSnapshot{} }
func (m *RdsOsSnapshot) String() string            { return proto.CompactTextString(m) }
func (*RdsOsSnapshot) ProtoMessage()               {}
func (*RdsOsSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RdsOsSnapshot) GetCpuUtilization() *RdsOsCPUUtilization {
	if m != nil {
		return m.CpuUtilization
	}
	return nil
}

func (m *RdsOsSnapshot) GetLoadAverageMinute() *RdsOsLoadAverageMinute {
	if m != nil {
		return m.LoadAverageMinute
	}
	return nil
}

func (m *RdsOsSnapshot) GetMemory() *RdsOsMemory {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *RdsOsSnapshot) GetTasks() *RdsOsTasks {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *RdsOsSnapshot) GetSwap() *RdsOsSwap {
	if m != nil {
		return m.Swap
	}
	return nil
}

func (m *RdsOsSnapshot) GetDiskIo() []*RdsOsDiskIO {
	if m != nil {
		return m.DiskIo
	}
	return nil
}

type RdsOsCPUUtilization struct {
	Guest  float32 `protobuf:"fixed32,1,opt,name=guest" json:"guest,omitempty"`
	Irq    float32 `protobuf:"fixed32,2,opt,name=irq" json:"irq,omitempty"`
	System float32 `protobuf:"fixed32,3,opt,name=system" json:"system,omitempty"`
	Wait   float32 `protobuf:"fixed32,4,opt,name=wait" json:"wait,omitempty"`
	Idle   float32 `protobuf:"fixed32,5,opt,name=idle" json:"idle,omitempty"`
	User   float32 `protobuf:"fixed32,6,opt,name=user" json:"user,omitempty"`
	Total  float32 `protobuf:"fixed32,7,opt,name=total" json:"total,omitempty"`
	Steal  float32 `protobuf:"fixed32,8,opt,name=steal" json:"steal,omitempty"`
	Nice   float32 `protobuf:"fixed32,9,opt,name=nice" json:"nice,omitempty"`
}

func (m *RdsOsCPUUtilization) Reset()                    { *m = RdsOsCPUUtilization{} }
func (m *RdsOsCPUUtilization) String() string            { return proto.CompactTextString(m) }
func (*RdsOsCPUUtilization) ProtoMessage()               {}
func (*RdsOsCPUUtilization) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type RdsOsLoadAverageMinute struct {
	Fifteen float32 `protobuf:"fixed32,1,opt,name=fifteen" json:"fifteen,omitempty"`
	Five    float32 `protobuf:"fixed32,2,opt,name=five" json:"five,omitempty"`
	One     float32 `protobuf:"fixed32,3,opt,name=one" json:"one,omitempty"`
}

func (m *RdsOsLoadAverageMinute) Reset()                    { *m = RdsOsLoadAverageMinute{} }
func (m *RdsOsLoadAverageMinute) String() string            { return proto.CompactTextString(m) }
func (*RdsOsLoadAverageMinute) ProtoMessage()               {}
func (*RdsOsLoadAverageMinute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type RdsOsMemory struct {
	Writeback      int64 `protobuf:"varint,1,opt,name=writeback" json:"writeback,omitempty"`
	HugePagesFree  int64 `protobuf:"varint,2,opt,name=huge_pages_free,json=hugePagesFree" json:"huge_pages_free,omitempty"`
	HugePagesRsvd  int64 `protobuf:"varint,3,opt,name=huge_pages_rsvd,json=hugePagesRsvd" json:"huge_pages_rsvd,omitempty"`
	HugePagesSurp  int64 `protobuf:"varint,4,opt,name=huge_pages_surp,json=hugePagesSurp" json:"huge_pages_surp,omitempty"`
	Cached         int64 `protobuf:"varint,5,opt,name=cached" json:"cached,omitempty"`
	HugePagesSize  int64 `protobuf:"varint,6,opt,name=huge_pages_size,json=hugePagesSize" json:"huge_pages_size,omitempty"`
	Free           int64 `protobuf:"varint,7,opt,name=free" json:"free,omitempty"`
	HugePagesTotal int64 `protobuf:"varint,8,opt,name=huge_pages_total,json=hugePagesTotal" json:"huge_pages_total,omitempty"`
	Inactive       int64 `protobuf:"varint,9,opt,name=inactive" json:"inactive,omitempty"`
	PageTables     int64 `protobuf:"varint,10,opt,name=page_tables,json=pageTables" json:"page_tables,omitempty"`
	Dirty          int64 `protobuf:"varint,11,opt,name=dirty" json:"dirty,omitempty"`
	Mapped         int64 `protobuf:"varint,12,opt,name=mapped" json:"mapped,omitempty"`
	Active         int64 `protobuf:"varint,13,opt,name=active" json:"active,omitempty"`
	Total          int64 `protobuf:"varint,14,opt,name=total" json:"total,omitempty"`
	Slab           int64 `protobuf:"varint,15,opt,name=slab" json:"slab,omitempty"`
	Buffers        int64 `protobuf:"varint,16,opt,name=buffers" json:"buffers,omitempty"`
}

func (m *RdsOsMemory) Reset()                    { *m = RdsOsMemory{} }
func (m *RdsOsMemory) String() string            { return proto.CompactTextString(m) }
func (*RdsOsMemory) ProtoMessage()               {}
func (*RdsOsMemory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type RdsOsTasks struct {
	Sleeping int64 `protobuf:"varint,1,opt,name=sleeping" json:"sleeping,omitempty"`
	Zombie   int64 `protobuf:"varint,2,opt,name=zombie" json:"zombie,omitempty"`
	Running  int64 `protobuf:"varint,3,opt,name=running" json:"running,omitempty"`
	Stopped  int64 `protobuf:"varint,4,opt,name=stopped" json:"stopped,omitempty"`
	Total    int64 `protobuf:"varint,5,opt,name=total" json:"total,omitempty"`
	Blocked  int64 `protobuf:"varint,6,opt,name=blocked" json:"blocked,omitempty"`
}

func (m *RdsOsTasks) Reset()                    { *m = RdsOsTasks{} }
func (m *RdsOsTasks) String() string            { return proto.CompactTextString(m) }
func (*RdsOsTasks) ProtoMessage()               {}
func (*RdsOsTasks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type RdsOsSwap struct {
	Cached int64 `protobuf:"varint,1,opt,name=cached" json:"cached,omitempty"`
	Total  int64 `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Free   int64 `protobuf:"varint,3,opt,name=free" json:"free,omitempty"`
}

func (m *RdsOsSwap) Reset()                    { *m = RdsOsSwap{} }
func (m *RdsOsSwap) String() string            { return proto.CompactTextString(m) }
func (*RdsOsSwap) ProtoMessage()               {}
func (*RdsOsSwap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type RdsOsDiskIO struct {
	WriteKbPS   float32 `protobuf:"fixed32,1,opt,name=writeKbPS" json:"writeKbPS,omitempty"`
	ReadIOsPS   float32 `protobuf:"fixed32,2,opt,name=readIOsPS" json:"readIOsPS,omitempty"`
	Await       float32 `protobuf:"fixed32,3,opt,name=await" json:"await,omitempty"`
	ReadKbPS    float32 `protobuf:"fixed32,4,opt,name=readKbPS" json:"readKbPS,omitempty"`
	RrqmPS      float32 `protobuf:"fixed32,5,opt,name=rrqmPS" json:"rrqmPS,omitempty"`
	Util        float32 `protobuf:"fixed32,6,opt,name=util" json:"util,omitempty"`
	AvgQueueLen float32 `protobuf:"fixed32,7,opt,name=avgQueueLen" json:"avgQueueLen,omitempty"`
	Tps         float32 `protobuf:"fixed32,8,opt,name=tps" json:"tps,omitempty"`
	ReadKb      float32 `protobuf:"fixed32,9,opt,name=readKb" json:"readKb,omitempty"`
	Device      string  `protobuf:"bytes,10,opt,name=device" json:"device,omitempty"`
	WriteKb     float32 `protobuf:"fixed32,11,opt,name=writeKb" json:"writeKb,omitempty"`
	AvgReqSz    float32 `protobuf:"fixed32,12,opt,name=avgReqSz" json:"avgReqSz,omitempty"`
	WrqmPS      float32 `protobuf:"fixed32,13,opt,name=wrqmPS" json:"wrqmPS,omitempty"`
	WriteIOsPS  float32 `protobuf:"fixed32,14,opt,name=writeIOsPS" json:"writeIOsPS,omitempty"`
}

func (m *RdsOsDiskIO) Reset()                    { *m = RdsOsDiskIO{} }
func (m *RdsOsDiskIO) String() string            { return proto.CompactTextString(m) }
func (*RdsOsDiskIO) ProtoMessage()               {}
func (*RdsOsDiskIO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func init() {
	proto.RegisterType((*NullString)(nil), "snapshot.NullString")
	proto.RegisterType((*NullInt64)(nil), "snapshot.NullInt64")
	proto.RegisterType((*NullDouble)(nil), "snapshot.NullDouble")
	proto.RegisterType((*NullTimestamp)(nil), "snapshot.NullTimestamp")
	proto.RegisterType((*Snapshot)(nil), "snapshot.Snapshot")
	proto.RegisterType((*SnapshotOpts)(nil), "snapshot.SnapshotOpts")
	proto.RegisterType((*SnapshotPostgres)(nil), "snapshot.SnapshotPostgres")
	proto.RegisterType((*System)(nil), "snapshot.System")
	proto.RegisterType((*Storage)(nil), "snapshot.Storage")
	proto.RegisterType((*Scheduler)(nil), "snapshot.Scheduler")
	proto.RegisterType((*LogLine)(nil), "snapshot.LogLine")
	proto.RegisterType((*Explain)(nil), "snapshot.Explain")
	proto.RegisterType((*Setting)(nil), "snapshot.Setting")
	proto.RegisterType((*Function)(nil), "snapshot.Function")
	proto.RegisterType((*Relation)(nil), "snapshot.Relation")
	proto.RegisterType((*Relation_Column)(nil), "snapshot.Relation.Column")
	proto.RegisterType((*Relation_Stats)(nil), "snapshot.Relation.Stats")
	proto.RegisterType((*Relation_Index)(nil), "snapshot.Relation.Index")
	proto.RegisterType((*Relation_Constraint)(nil), "snapshot.Relation.Constraint")
	proto.RegisterType((*StoragePerfdata)(nil), "snapshot.StoragePerfdata")
	proto.RegisterType((*Network)(nil), "snapshot.Network")
	proto.RegisterType((*CPU)(nil), "snapshot.CPU")
	proto.RegisterType((*Memory)(nil), "snapshot.Memory")
	proto.RegisterType((*PostgresVersion)(nil), "snapshot.PostgresVersion")
	proto.RegisterType((*Activity)(nil), "snapshot.Activity")
	proto.RegisterType((*AmazonRdsInfo)(nil), "snapshot.AmazonRdsInfo")
	proto.RegisterType((*RdsOsSnapshot)(nil), "snapshot.RdsOsSnapshot")
	proto.RegisterType((*RdsOsCPUUtilization)(nil), "snapshot.RdsOsCPUUtilization")
	proto.RegisterType((*RdsOsLoadAverageMinute)(nil), "snapshot.RdsOsLoadAverageMinute")
	proto.RegisterType((*RdsOsMemory)(nil), "snapshot.RdsOsMemory")
	proto.RegisterType((*RdsOsTasks)(nil), "snapshot.RdsOsTasks")
	proto.RegisterType((*RdsOsSwap)(nil), "snapshot.RdsOsSwap")
	proto.RegisterType((*RdsOsDiskIO)(nil), "snapshot.RdsOsDiskIO")
	proto.RegisterEnum("snapshot.SystemType", SystemType_name, SystemType_value)
	proto.RegisterEnum("snapshot.LogLine_SourceType", LogLine_SourceType_name, LogLine_SourceType_value)
}

var fileDescriptor0 = []byte{
	// 4458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x5a, 0xbd, 0x77, 0x1c, 0x59,
	0x56, 0x5f, 0x75, 0xeb, 0xa3, 0xfb, 0xb5, 0xfa, 0x43, 0x25, 0x5b, 0x6e, 0x6b, 0x3c, 0xb3, 0xde,
	0xe6, 0x2c, 0x0c, 0xb3, 0x3b, 0x9e, 0x1d, 0xcf, 0x78, 0x66, 0x96, 0xe1, 0xc0, 0xca, 0x92, 0x8d,
	0xc5, 0x5a, 0x96, 0xa8, 0x96, 0x0c, 0xbb, 0x49, 0x9d, 0x52, 0xd7, 0xeb, 0x56, 0x1d, 0x77, 0x57,
	0x95, 0xeb, 0x43, 0xb2, 0x14, 0x93, 0x90, 0x40, 0xb8, 0x19, 0x11, 0x01, 0x01, 0x01, 0xe7, 0xf0,
	0x7f, 0x70, 0x0e, 0x84, 0x44, 0x64, 0x40, 0x42, 0x44, 0xb2, 0x19, 0xf7, 0xeb, 0xbd, 0xaa, 0x6e,
	0xc9, 0x9a, 0x81, 0xac, 0xde, 0xef, 0xfe, 0xee, 0xfb, 0xbc, 0xef, 0xde, 0xfb, 0xde, 0x2b, 0x75,
	0x2f, 0x8b, 0xfc, 0x24, 0x3b, 0x8b, 0xf3, 0xcf, 0xcc, 0xc7, 0xa3, 0x24, 0x8d, 0xf3, 0xd8, 0x69,
	0x98, 0xf2, 0xe0, 0x1b, 0xa5, 0x5e, 0x15, 0xd3, 0xe9, 0x30, 0x4f, 0xc3, 0x68, 0xe2, 0xdc, 0x51,
	0x2b, 0xe7, 0xfe, 0x34, 0x0c, 0xfa, 0x4b, 0x0f, 0x97, 0x3e, 0x6e, 0xb8, 0x5c, 0x10, 0xb4, 0xd0,
	0xfd, 0x1a, 0xa0, 0x4d, 0x97, 0x0b, 0x83, 0xaf, 0x55, 0x13, 0x35, 0xf7, 0xa3, 0xfc, 0xab, 0x2f,
	0xbf, 0x8f, 0x62, 0xdd, 0x28, 0x4a, 0x93, 0x7b, 0x71, 0x71, 0x3a, 0xd5, 0xdf, 0x47, 0x73, 0xc9,
	0x68, 0x7e, 0xab, 0xda, 0xa8, 0x79, 0x1c, 0xce, 0x74, 0x96, 0xfb, 0xb3, 0xe4, 0xff, 0xd4, 0xec,
	0xdf, 0xd6, 0x54, 0x63, 0x28, 0xc3, 0x76, 0x1e, 0xa9, 0xc6, 0xa9, 0x3f, 0x7a, 0xa3, 0xa3, 0x20,
	0x03, 0xdd, 0xfa, 0xc7, 0xad, 0xc7, 0xce, 0x23, 0x3b, 0x47, 0x3b, 0xa3, 0x3c, 0x3c, 0x0f, 0xf3,
	0x4b, 0xd7, 0x72, 0x9c, 0xaf, 0x54, 0x23, 0x89, 0xb3, 0x7c, 0x92, 0xea, 0xac, 0x5f, 0x87, 0x5a,
	0x5b, 0x8f, 0xb7, 0x4b, 0xbe, 0xa9, 0xf5, 0x48, 0x18, 0xae, 0xe5, 0x3a, 0x1f, 0xab, 0xd5, 0xec,
	0x32, 0xcb, 0xf5, 0xac, 0xbf, 0x4c, 0x5a, 0xbd, 0x8a, 0x16, 0xe1, 0xae, 0xc8, 0x9d, 0x1f, 0xab,
	0xe5, 0x69, 0x3c, 0xc9, 0xfa, 0x2b, 0xd4, 0x9b, 0x8d, 0x92, 0xf7, 0x32, 0x9e, 0xbc, 0x0c, 0x23,
	0xed, 0x92, 0xd8, 0xf9, 0x54, 0x35, 0xf4, 0xbb, 0x64, 0xea, 0x87, 0x51, 0xd6, 0x5f, 0x5d, 0xa4,
	0x3e, 0x63, 0x89, 0x6b, 0x29, 0xce, 0x27, 0x6a, 0x39, 0x4e, 0xf2, 0xac, 0xbf, 0x46, 0xad, 0x6f,
	0x5d, 0xef, 0xf3, 0x21, 0x48, 0x5d, 0xe2, 0x0c, 0x7e, 0xb3, 0xa4, 0xd6, 0xab, 0xb0, 0xf3, 0xad,
	0xda, 0x86, 0x69, 0x86, 0xce, 0xe9, 0x28, 0xf7, 0xf0, 0x2b, 0xf3, 0xfc, 0x54, 0x7b, 0x41, 0x38,
	0x1e, 0x6b, 0x33, 0xe5, 0xf7, 0x2c, 0x63, 0x88, 0x84, 0x9d, 0x54, 0xef, 0x91, 0xd8, 0xf9, 0x53,
	0x35, 0x30, 0xb3, 0xe0, 0xa5, 0x7a, 0xea, 0xe7, 0x61, 0x1c, 0x5d, 0xaf, 0xa4, 0x46, 0x95, 0x7c,
	0x64, 0x98, 0xae, 0x10, 0xe7, 0xeb, 0x1a, 0xfc, 0xdb, 0x92, 0xea, 0x2d, 0x4e, 0xb2, 0xf3, 0x33,
	0xd5, 0x34, 0xf5, 0xde, 0xb0, 0x86, 0xa6, 0x26, 0xb7, 0x24, 0xe1, 0xdc, 0x65, 0x3a, 0xcf, 0xc1,
	0xd0, 0x33, 0x68, 0x78, 0x61, 0xee, 0x86, 0x2c, 0x71, 0x2d, 0x05, 0x1b, 0x18, 0x17, 0xd1, 0x88,
	0x1b, 0xa8, 0x2f, 0x36, 0xf0, 0x5c, 0x44, 0x6e, 0x49, 0x72, 0xbe, 0x50, 0x6b, 0xe7, 0x3a, 0xcd,
	0xe0, 0x5b, 0x96, 0xfb, 0x7e, 0xc9, 0x37, 0xfd, 0x7e, 0xcd, 0x04, 0xd7, 0x30, 0x07, 0xff, 0x55,
	0x53, 0xab, 0x6c, 0x0b, 0xce, 0x13, 0xd5, 0x62, 0x6b, 0xf0, 0xf2, 0xcb, 0x44, 0xd3, 0x0c, 0x77,
	0x1e, 0xdf, 0x59, 0x34, 0x99, 0x63, 0x90, 0xb9, 0x2a, 0xb3, 0xdf, 0xce, 0x8e, 0xea, 0xfa, 0x33,
	0xff, 0x0a, 0xe6, 0x37, 0x0d, 0x32, 0x2f, 0x8c, 0xc6, 0x31, 0xcd, 0x6b, 0xeb, 0xf1, 0xbd, 0x8a,
	0x4d, 0x13, 0xc1, 0x0d, 0xb2, 0x7d, 0x10, 0xbf, 0xf8, 0x81, 0xdb, 0xf6, 0xab, 0x80, 0xf3, 0x43,
	0x55, 0x1f, 0x25, 0x85, 0x98, 0x76, 0xbb, 0x54, 0xdb, 0x3d, 0x3a, 0x71, 0x51, 0x82, 0x86, 0x3c,
	0xd3, 0xb3, 0x38, 0xbd, 0xbc, 0x6e, 0xc8, 0x07, 0x84, 0xbb, 0x22, 0x77, 0x7e, 0xa2, 0xd6, 0xb2,
	0x3c, 0x4e, 0xfd, 0x89, 0xbe, 0x6e, 0xcb, 0x43, 0x16, 0xb8, 0x86, 0x81, 0xe4, 0x48, 0xe7, 0x17,
	0x71, 0xfa, 0x06, 0xac, 0x79, 0x69, 0x9e, 0xfc, 0x8a, 0x05, 0xae, 0x61, 0x38, 0x9f, 0xab, 0x66,
	0x36, 0x3a, 0xd3, 0x41, 0x31, 0xd5, 0xa9, 0x58, 0xf4, 0x66, 0xa5, 0x6e, 0x23, 0x72, 0x4b, 0xd6,
	0xd3, 0xb6, 0x9d, 0x51, 0x9c, 0x96, 0xc1, 0xbf, 0x2e, 0xa9, 0x35, 0xe9, 0x83, 0xf3, 0x7b, 0xaa,
	0x7b, 0x7a, 0x99, 0x83, 0x75, 0xfa, 0xe7, 0x7e, 0x38, 0xf5, 0xc1, 0x17, 0xd1, 0x84, 0xd7, 0xdd,
	0x0e, 0xc1, 0x3b, 0x06, 0x85, 0xb9, 0x69, 0x31, 0x31, 0x8f, 0x73, 0x7f, 0x2a, 0x4e, 0x45, 0x11,
	0x74, 0x8c, 0x88, 0xf3, 0x91, 0x52, 0xb3, 0xb8, 0x88, 0xf2, 0x24, 0x0e, 0xa3, 0x9c, 0xe6, 0xb0,
	0xe9, 0x56, 0x10, 0xc7, 0x51, 0xcb, 0x91, 0x3f, 0xd3, 0x34, 0x73, 0x4d, 0x97, 0xbe, 0x11, 0x4b,
	0xfc, 0xfc, 0x0c, 0xa6, 0x88, 0x30, 0xfc, 0x86, 0xe5, 0x6f, 0x24, 0x3a, 0x1d, 0x07, 0x7e, 0xee,
	0xcb, 0x6c, 0xdc, 0xbf, 0x36, 0x75, 0x47, 0x42, 0x70, 0x2d, 0x75, 0xf0, 0x8f, 0x35, 0xd5, 0xb4,
	0x83, 0x77, 0x7e, 0x5f, 0xf5, 0x46, 0x71, 0x94, 0xeb, 0x77, 0xb0, 0x65, 0x2f, 0xc2, 0x1c, 0xf0,
	0x4c, 0xc6, 0xd5, 0x15, 0x7c, 0x28, 0x30, 0xf6, 0x1b, 0xba, 0xa7, 0xd3, 0xb4, 0x40, 0x17, 0x21,
	0xe3, 0x2a, 0x11, 0xe7, 0x47, 0x6a, 0x7d, 0x1a, 0xfb, 0x81, 0x7f, 0x3e, 0xf1, 0x3e, 0x9f, 0x85,
	0x11, 0x8d, 0x6c, 0xc9, 0x6d, 0x09, 0x86, 0x50, 0x95, 0xf2, 0x04, 0x29, 0xcb, 0x73, 0x14, 0x84,
	0x9c, 0xdf, 0x51, 0x6d, 0x5b, 0x0b, 0x71, 0x56, 0x88, 0x63, 0xf4, 0x3e, 0x37, 0x24, 0x88, 0x4c,
	0xa3, 0xcc, 0x3b, 0x9d, 0xc6, 0xe0, 0x72, 0x03, 0x1a, 0x7f, 0xdd, 0x5d, 0x27, 0xf0, 0x29, 0x63,
	0x25, 0x69, 0x94, 0x6a, 0x70, 0x3a, 0x01, 0xd9, 0x80, 0x21, 0xed, 0x32, 0x56, 0x92, 0xd2, 0x22,
	0x8a, 0x60, 0x1f, 0xf7, 0x1b, 0x15, 0x92, 0xcb, 0xd8, 0xe0, 0xdf, 0x6b, 0x6a, 0x4d, 0xfc, 0x2a,
	0x2e, 0x6f, 0x3c, 0x1a, 0x15, 0x69, 0xaa, 0x03, 0xcf, 0xcf, 0x65, 0xae, 0x94, 0x81, 0x76, 0x72,
	0xe7, 0x4b, 0xf0, 0xe1, 0x71, 0x91, 0x8e, 0x38, 0x9e, 0x74, 0x1e, 0x3f, 0xb8, 0xe6, 0x9b, 0x1f,
	0x0d, 0x49, 0x4e, 0x1b, 0x53, 0xb8, 0x68, 0xac, 0xa3, 0x69, 0x88, 0x9e, 0x33, 0x4c, 0x64, 0x5f,
	0x55, 0x76, 0x72, 0x19, 0x73, 0xdd, 0x06, 0xd3, 0xf6, 0x13, 0xe7, 0x03, 0xd5, 0x04, 0x1f, 0xef,
	0x4d, 0xf5, 0xb9, 0x9e, 0x8a, 0xb1, 0x34, 0x00, 0x78, 0x89, 0x65, 0xb2, 0x42, 0x8e, 0x46, 0x5e,
	0x02, 0x01, 0x0f, 0x27, 0x71, 0x05, 0xac, 0x90, 0xa1, 0x23, 0x88, 0x7a, 0x7d, 0xb5, 0x46, 0x0b,
	0x0c, 0x26, 0xb8, 0x4a, 0xba, 0xa6, 0xe8, 0xfc, 0xa1, 0xea, 0xf9, 0x41, 0x10, 0xa2, 0x8f, 0xf2,
	0xa7, 0xde, 0x14, 0x3a, 0x8c, 0x01, 0xe1, 0x3d, 0x61, 0xa6, 0x5b, 0x52, 0xb1, 0x9c, 0x0d, 0x9e,
	0x28, 0x55, 0x0e, 0x0f, 0xec, 0xb6, 0x63, 0x3c, 0x19, 0xa3, 0xbd, 0x1f, 0x38, 0x9b, 0xaa, 0x6b,
	0xdd, 0x8b, 0x80, 0x4b, 0x83, 0x7f, 0x81, 0xad, 0x26, 0xf1, 0xe8, 0xbb, 0xa7, 0x18, 0x8c, 0x36,
	0x8a, 0xd3, 0x19, 0x44, 0xef, 0x2b, 0xa0, 0xbc, 0x2d, 0x34, 0xf8, 0x19, 0x4e, 0x36, 0xba, 0x25,
	0xfe, 0x67, 0x08, 0xe3, 0x30, 0x61, 0x65, 0x73, 0x48, 0x01, 0xc4, 0x1e, 0x4d, 0x11, 0x22, 0x68,
	0x47, 0xe2, 0x9e, 0x17, 0x17, 0x79, 0x52, 0xe4, 0x32, 0x87, 0x6d, 0x41, 0x0f, 0x09, 0x74, 0x7e,
	0xae, 0x0c, 0xe0, 0x81, 0xa1, 0xc7, 0x29, 0x4d, 0xe5, 0xfb, 0x16, 0x67, 0x5d, 0xa8, 0xcf, 0x90,
	0x39, 0xf8, 0x1f, 0x30, 0x1b, 0x89, 0x13, 0x76, 0x53, 0x2f, 0x55, 0x36, 0x35, 0xd8, 0x1e, 0x0d,
	0x09, 0x16, 0xbd, 0x9a, 0x30, 0xad, 0x0b, 0xf8, 0x1a, 0x31, 0xf0, 0xa4, 0xcb, 0x45, 0x14, 0xe6,
	0xb7, 0xda, 0x04, 0x31, 0x20, 0x9c, 0xa8, 0xd3, 0x38, 0x36, 0x75, 0x2d, 0xdf, 0xc2, 0x6f, 0x22,
	0x8f, 0xab, 0x87, 0x18, 0x02, 0x6b, 0xa3, 0x8d, 0xd6, 0x6d, 0x83, 0x53, 0x44, 0x64, 0xb5, 0x9f,
	0x5a, 0x23, 0x5f, 0xbd, 0x45, 0xc3, 0x18, 0x37, 0x06, 0x2a, 0xfa, 0xf2, 0xc6, 0x21, 0xf8, 0xcd,
	0xb5, 0xdb, 0x1a, 0x61, 0xe2, 0x73, 0xe0, 0x55, 0xd4, 0xd0, 0x08, 0x69, 0x67, 0x7e, 0x87, 0x1a,
	0x9a, 0xe0, 0xe0, 0xbf, 0x97, 0x55, 0xc3, 0x84, 0x5b, 0xb4, 0x25, 0x74, 0xef, 0x33, 0xdf, 0xab,
	0x4c, 0xbf, 0x62, 0xe8, 0x95, 0x2c, 0x82, 0x89, 0xc8, 0x4c, 0x91, 0x45, 0x30, 0x20, 0x91, 0xb6,
	0x55, 0x63, 0xea, 0x47, 0x93, 0x02, 0xa3, 0x54, 0x5d, 0x76, 0x9a, 0x94, 0x9d, 0x2d, 0x3b, 0x15,
	0x6c, 0x3f, 0x66, 0xd0, 0x1f, 0x2a, 0xe9, 0x94, 0x77, 0x2a, 0x5e, 0xac, 0x09, 0xa1, 0x86, 0x90,
	0xa7, 0x60, 0xe4, 0x30, 0x83, 0xb0, 0xe1, 0xc6, 0xe1, 0xe4, 0xf6, 0x19, 0x64, 0x8e, 0xf3, 0x40,
	0x35, 0xfd, 0x74, 0x52, 0x60, 0xe2, 0xc4, 0xd9, 0x19, 0xd4, 0x65, 0x01, 0xec, 0x02, 0xac, 0x4d,
	0x31, 0xcd, 0x69, 0x8e, 0xa0, 0x0b, 0x5c, 0x22, 0xad, 0x09, 0xec, 0xbd, 0x09, 0xb8, 0xba, 0x7e,
	0x93, 0x72, 0xa7, 0x12, 0x40, 0xad, 0x8b, 0x30, 0x0a, 0xe2, 0x8b, 0xbe, 0x22, 0x91, 0x94, 0x70,
	0x77, 0x65, 0x1a, 0x6c, 0x10, 0x52, 0x5a, 0x2f, 0xd0, 0x63, 0x98, 0xd2, 0xb4, 0xdf, 0x22, 0x46,
	0xd7, 0xe0, 0x7b, 0x0c, 0x63, 0x03, 0x53, 0xed, 0xbf, 0x01, 0x67, 0x19, 0x8f, 0xfb, 0xeb, 0xdc,
	0x80, 0x05, 0x68, 0x66, 0x60, 0x18, 0xa3, 0xbc, 0xdf, 0xe6, 0x06, 0xb8, 0x84, 0x6b, 0x92, 0xea,
	0xbc, 0x48, 0xa3, 0xcc, 0x03, 0x83, 0xea, 0x77, 0x48, 0xa8, 0x04, 0x82, 0x0d, 0x83, 0xd3, 0x7d,
	0x1e, 0x63, 0x1a, 0x06, 0xc6, 0xd2, 0xe5, 0xe9, 0x36, 0x65, 0xe8, 0xdd, 0xca, 0xc8, 0x9f, 0x4e,
	0xb3, 0x7e, 0x6f, 0x31, 0xa2, 0xdb, 0xe3, 0x85, 0xcb, 0x0c, 0xdc, 0x10, 0x14, 0x83, 0x3d, 0xda,
	0xfe, 0x1b, 0x37, 0x4d, 0x33, 0x9f, 0x2a, 0xdc, 0x26, 0xf1, 0xf0, 0xa0, 0x40, 0x59, 0x83, 0x9e,
	0x8e, 0x59, 0xc7, 0xb9, 0x45, 0xa7, 0x81, 0x34, 0x54, 0x19, 0xfc, 0xf5, 0x5d, 0xd5, 0x30, 0x09,
	0xa4, 0xd3, 0x53, 0xf5, 0x58, 0x4e, 0x18, 0x75, 0x17, 0x3f, 0x17, 0x4d, 0xb0, 0x76, 0xcd, 0x04,
	0xc1, 0x52, 0x72, 0x4c, 0x1d, 0x58, 0xce, 0xf6, 0xd5, 0x24, 0xc4, 0x58, 0xa8, 0xcd, 0x88, 0x29,
	0xd1, 0x63, 0x3b, 0x5b, 0x37, 0x20, 0x39, 0xda, 0x47, 0x6a, 0x85, 0xb2, 0x65, 0xd9, 0xc1, 0xfd,
	0xeb, 0xa9, 0xed, 0x23, 0xca, 0x92, 0x5d, 0xa6, 0x61, 0xee, 0x39, 0x8a, 0xa7, 0xc5, 0x2c, 0x32,
	0xbe, 0xfd, 0xfe, 0x0d, 0x1a, 0xbb, 0xc4, 0x70, 0x0d, 0xd3, 0x79, 0xac, 0xd6, 0xc0, 0x44, 0xc2,
	0x11, 0x04, 0x84, 0x06, 0x29, 0xdd, 0xd4, 0xcc, 0x7e, 0x14, 0xe8, 0x77, 0xae, 0x21, 0x3a, 0x7f,
	0xac, 0x5a, 0x60, 0xc3, 0xb0, 0xf2, 0xe0, 0x16, 0xa1, 0x7b, 0x4d, 0xd2, 0xfb, 0xf0, 0xc6, 0xc6,
	0x0c, 0xcb, 0xad, 0x6a, 0x60, 0xe2, 0x75, 0x1e, 0xea, 0x0b, 0x36, 0x45, 0x0a, 0x35, 0x64, 0xaf,
	0x4d, 0xb7, 0x83, 0xf0, 0x9e, 0x45, 0xb7, 0xff, 0x79, 0x49, 0xad, 0x72, 0x8f, 0x31, 0xcf, 0xb0,
	0x53, 0x56, 0xae, 0x46, 0xcb, 0x60, 0x87, 0xb0, 0x2a, 0xc6, 0x21, 0xd7, 0x2a, 0x0e, 0x19, 0x22,
	0x2a, 0xa6, 0x48, 0x3c, 0xcb, 0xb2, 0xcf, 0x11, 0xa0, 0x19, 0x86, 0x40, 0x00, 0x5d, 0xf0, 0x61,
	0x5f, 0x7d, 0x0f, 0x0f, 0xbb, 0x2e, 0x54, 0xf6, 0x96, 0xf7, 0x55, 0x23, 0x02, 0xc7, 0x1c, 0x81,
	0x9c, 0xd6, 0xa7, 0x01, 0x49, 0x6a, 0x9c, 0x23, 0x1d, 0x4d, 0x1d, 0x4e, 0x33, 0x3c, 0x2c, 0x4e,
	0x62, 0x6c, 0x79, 0xfb, 0xef, 0x95, 0x5a, 0xa1, 0x45, 0x23, 0x5f, 0x02, 0x31, 0xcd, 0xa3, 0x2c,
	0x52, 0x46, 0xd3, 0x44, 0xe4, 0x29, 0x02, 0x38, 0xdc, 0x0b, 0x1f, 0xd2, 0xd6, 0x40, 0x08, 0x9c,
	0x9b, 0xb5, 0x18, 0x63, 0xca, 0x7d, 0x3c, 0xcc, 0xbc, 0xf5, 0xb2, 0x91, 0xcf, 0x89, 0x59, 0x1d,
	0x92, 0x6a, 0xfd, 0x76, 0x08, 0x45, 0xe7, 0xa1, 0x5a, 0x47, 0x51, 0x5e, 0x24, 0x70, 0xf2, 0xf2,
	0x03, 0x1a, 0x17, 0xc4, 0x5b, 0xc0, 0x8e, 0x8b, 0xc4, 0x05, 0x04, 0x95, 0xc3, 0xe0, 0x1d, 0x2b,
	0xaf, 0xb0, 0x32, 0x94, 0x49, 0x79, 0xa0, 0xda, 0x28, 0x42, 0xe5, 0xb1, 0x86, 0x3c, 0x51, 0x06,
	0xd1, 0x02, 0x10, 0xb4, 0x9f, 0x23, 0x04, 0x63, 0x6c, 0x46, 0xc4, 0x08, 0xa3, 0x4c, 0x92, 0xb0,
	0xb5, 0x08, 0xa4, 0xfb, 0x60, 0x52, 0x56, 0x56, 0x24, 0x81, 0xe4, 0x5e, 0x24, 0x3b, 0x49, 0x82,
	0x52, 0x16, 0x40, 0x82, 0xd3, 0x2c, 0x65, 0x7b, 0x90, 0xdf, 0xfc, 0x48, 0xb5, 0x59, 0x06, 0x13,
	0x4f, 0xba, 0x8a, 0x7b, 0x8d, 0xf2, 0x17, 0x71, 0x8e, 0xea, 0x0f, 0x94, 0x8a, 0x20, 0x72, 0x9c,
	0x6b, 0xe4, 0x91, 0x07, 0x83, 0xc9, 0x8d, 0x5e, 0x02, 0x00, 0x1c, 0x96, 0x06, 0x30, 0x3a, 0x92,
	0xae, 0x8b, 0x74, 0x0f, 0x00, 0x94, 0x3e, 0x55, 0x9b, 0x91, 0x37, 0x8b, 0x03, 0x2f, 0x0b, 0x23,
	0xf0, 0xe0, 0x3e, 0xa4, 0x37, 0x97, 0x57, 0x9a, 0xfc, 0xd8, 0x7b, 0x7c, 0x4e, 0x2f, 0x3a, 0x88,
	0x83, 0x21, 0xb2, 0x77, 0x98, 0xec, 0x7c, 0xa3, 0x5a, 0x53, 0x58, 0x01, 0xb0, 0x96, 0x51, 0x51,
	0xcc, 0xc8, 0xcd, 0xcd, 0x9d, 0xb1, 0xe6, 0xee, 0x26, 0x5c, 0x85, 0xdc, 0xd7, 0x44, 0x75, 0x7e,
	0xa1, 0xba, 0xa4, 0xe9, 0x17, 0x79, 0x2c, 0xda, 0xdd, 0xdb, 0xb5, 0x3b, 0xc8, 0xdf, 0xb1, 0x74,
	0xe7, 0x0f, 0x20, 0xd1, 0xa6, 0x1a, 0xa4, 0xe3, 0xbd, 0xdb, 0xd5, 0xa9, 0xa3, 0xa6, 0xdf, 0x4f,
	0x55, 0xcf, 0xb6, 0x6e, 0xf4, 0x37, 0x6e, 0xd7, 0xef, 0x9a, 0xe6, 0x85, 0x8f, 0x16, 0xc9, 0x3d,
	0xf1, 0x46, 0x78, 0xb0, 0x21, 0x47, 0x0a, 0x56, 0xc1, 0xd8, 0x2e, 0x42, 0x18, 0x66, 0xca, 0xf1,
	0x09, 0x6d, 0x93, 0x4f, 0x1e, 0x25, 0xce, 0x54, 0xf0, 0x80, 0x52, 0xb1, 0xf0, 0xee, 0x70, 0x92,
	0x2e, 0x20, 0x93, 0x7e, 0xa2, 0x36, 0x2a, 0x3d, 0x16, 0xe2, 0x5d, 0x22, 0xf6, 0x2a, 0x02, 0x26,
	0xff, 0x5c, 0x75, 0xce, 0xb4, 0x9f, 0xc0, 0xf9, 0xe1, 0x4d, 0xc6, 0x56, 0xbf, 0xf5, 0xfe, 0xa5,
	0x5d, 0x47, 0xea, 0x53, 0x60, 0xd2, 0x66, 0xf8, 0x5a, 0xb5, 0x4b, 0xd5, 0x33, 0xc8, 0xcc, 0xee,
	0xbd, 0x5f, 0xb3, 0x65, 0x34, 0x5f, 0x40, 0x7e, 0xf6, 0x35, 0x6f, 0x95, 0xb2, 0xc9, 0xfe, 0x2d,
	0x8a, 0xc0, 0xb4, 0x2d, 0x3e, 0x51, 0xeb, 0x56, 0x11, 0x1b, 0xbc, 0xff, 0x7e, 0x3d, 0x25, 0x7a,
	0xd8, 0xde, 0xb7, 0xaa, 0x0b, 0xa3, 0x86, 0x85, 0x2c, 0x5b, 0xdc, 0x7e, 0xbf, 0x66, 0x9b, 0xb8,
	0xb6, 0x4d, 0x98, 0xa0, 0x8a, 0x32, 0xb6, 0xfa, 0xc1, 0x2d, 0x13, 0x64, 0x75, 0xb1, 0x5d, 0x54,
	0x9d, 0x1f, 0xe8, 0x83, 0xdb, 0x54, 0xab, 0x23, 0x85, 0x29, 0xca, 0xe7, 0x86, 0xfa, 0xe1, 0x2d,
	0x53, 0x94, 0x97, 0x63, 0xdd, 0xfe, 0x9b, 0x65, 0xb5, 0x42, 0x81, 0xe7, 0xfb, 0xb8, 0x7e, 0x70,
	0xf3, 0x21, 0x72, 0x49, 0xce, 0xbe, 0xb2, 0x41, 0xc0, 0xa1, 0x39, 0x17, 0x71, 0x60, 0xac, 0x9b,
	0x73, 0x11, 0x47, 0xbf, 0x9b, 0xce, 0xe5, 0xf3, 0x8e, 0x79, 0xe5, 0xbb, 0x1c, 0xf3, 0xea, 0x75,
	0xc7, 0x0c, 0x35, 0x84, 0x99, 0x97, 0xa4, 0xe1, 0xcc, 0x87, 0x53, 0xcc, 0x1a, 0xe7, 0x50, 0x61,
	0x76, 0xc4, 0x00, 0xf5, 0x35, 0xf3, 0x20, 0xbf, 0x87, 0x53, 0x0e, 0xf9, 0xc7, 0x06, 0xf4, 0x35,
	0x3b, 0xa1, 0x32, 0xf9, 0xe5, 0xcc, 0xe3, 0x2b, 0x4d, 0x4e, 0xef, 0xd6, 0xc2, 0xec, 0x35, 0x5d,
	0x6a, 0xda, 0x31, 0x42, 0x20, 0x92, 0x78, 0xc9, 0x63, 0x84, 0x80, 0x09, 0x96, 0xd1, 0x29, 0x23,
	0x2c, 0x31, 0x5a, 0xb7, 0xc4, 0xb2, 0x76, 0xc9, 0x45, 0xe5, 0x6a, 0x30, 0x58, 0x9f, 0x0f, 0x06,
	0x0f, 0xd9, 0x50, 0x6d, 0x24, 0x69, 0xcb, 0x1d, 0x01, 0xc5, 0x02, 0x5a, 0xe0, 0x6b, 0xe1, 0xa2,
	0x73, 0x3d, 0x5c, 0x0c, 0x16, 0xf7, 0x49, 0xd7, 0x72, 0xac, 0xa1, 0x3c, 0x5c, 0xd8, 0x12, 0x3d,
	0xdb, 0x92, 0xb1, 0x88, 0xdf, 0x2e, 0x29, 0x55, 0xa6, 0x14, 0xff, 0xdf, 0x8c, 0xe0, 0xc7, 0xd7,
	0x66, 0x8a, 0x8d, 0x62, 0x61, 0x4e, 0x2a, 0x46, 0xb3, 0x3c, 0x6f, 0x34, 0x50, 0xc1, 0x38, 0x4e,
	0x75, 0x38, 0x89, 0x3c, 0xce, 0xf8, 0xe4, 0x24, 0xd0, 0x16, 0x74, 0x48, 0x20, 0x9d, 0x42, 0x84,
	0x46, 0x89, 0x9f, 0x9c, 0xc9, 0xd7, 0x05, 0x3c, 0xa6, 0x9b, 0x25, 0xc8, 0x84, 0x0c, 0xa9, 0xcc,
	0xdd, 0x28, 0x13, 0x12, 0x98, 0xb3, 0x9f, 0x6c, 0xf0, 0x57, 0xcb, 0xaa, 0xbb, 0x70, 0x01, 0x84,
	0x5d, 0x34, 0x97, 0x8d, 0x3c, 0x76, 0x53, 0x74, 0xee, 0xc2, 0xe9, 0x21, 0xf0, 0xc2, 0xd8, 0xe4,
	0x0d, 0x2b, 0x69, 0xb0, 0x1f, 0x67, 0x08, 0x5f, 0xa4, 0x04, 0x73, 0xbe, 0xb0, 0x72, 0x91, 0x22,
	0xfc, 0x91, 0x6a, 0x01, 0x06, 0xa1, 0x1c, 0x6c, 0x36, 0x9e, 0x48, 0xb2, 0xd0, 0x04, 0x68, 0x3f,
	0x3a, 0x02, 0x00, 0x57, 0x06, 0xef, 0x6e, 0x52, 0x4c, 0x36, 0x60, 0x1f, 0xc8, 0x9e, 0x50, 0x80,
	0xb9, 0x90, 0x6f, 0x00, 0x82, 0x16, 0x0f, 0xed, 0xc1, 0xbc, 0xeb, 0x68, 0x74, 0x49, 0x03, 0x5d,
	0x72, 0x9b, 0x69, 0xf0, 0x92, 0x01, 0x4a, 0x77, 0x21, 0x28, 0x9f, 0xa5, 0x71, 0x31, 0x39, 0xc3,
	0x63, 0xb9, 0x5c, 0xdb, 0xa4, 0xc1, 0xb1, 0xc5, 0xb0, 0x0e, 0xe8, 0x9c, 0xa9, 0xa3, 0xc1, 0x75,
	0x5c, 0xa4, 0x95, 0x3a, 0x40, 0x5c, 0xa9, 0x83, 0xb3, 0x87, 0xf5, 0x8b, 0xb4, 0x52, 0x07, 0x6c,
	0x11, 0x68, 0x68, 0xa6, 0xd3, 0x09, 0xec, 0x4c, 0x4e, 0x1f, 0x1a, 0x69, 0x70, 0x40, 0x65, 0xe9,
	0x24, 0x9c, 0x77, 0x60, 0x1a, 0x33, 0x49, 0x1e, 0x80, 0x3e, 0x64, 0x00, 0x37, 0x01, 0x76, 0x32,
	0x1c, 0xbd, 0xc9, 0xcc, 0x26, 0x80, 0xfe, 0x61, 0x11, 0xab, 0x85, 0xb6, 0xa5, 0x5a, 0xde, 0x01,
	0x8d, 0x8b, 0xb4, 0xac, 0x16, 0x84, 0xa6, 0x5a, 0x36, 0x7e, 0xa0, 0x57, 0xaa, 0xc5, 0x7e, 0x53,
	0xb5, 0x6c, 0xf5, 0x6b, 0xd0, 0x65, 0x53, 0x2d, 0x1c, 0x52, 0x44, 0xc6, 0xe6, 0xde, 0x00, 0x80,
	0x85, 0xd8, 0x9d, 0xb7, 0x22, 0xdb, 0x90, 0xee, 0xbc, 0x25, 0xd1, 0x20, 0x54, 0x6b, 0x72, 0x33,
	0xea, 0x7c, 0xaa, 0x9c, 0x54, 0x8f, 0x34, 0x65, 0x44, 0xe5, 0xd4, 0xb0, 0x35, 0x6c, 0x88, 0xa4,
	0x32, 0x3f, 0x9f, 0xa9, 0x4d, 0xb0, 0xf0, 0x28, 0x9b, 0x85, 0x79, 0x95, 0xcf, 0x46, 0xe2, 0x18,
	0x51, 0xa9, 0x30, 0xf8, 0xcd, 0xaa, 0xaa, 0xef, 0x1e, 0x9d, 0x80, 0x09, 0xb4, 0x0a, 0x38, 0xab,
	0x85, 0x57, 0xb4, 0xb5, 0xa8, 0x81, 0x25, 0xb7, 0x0a, 0xc1, 0x21, 0xeb, 0xee, 0x69, 0x91, 0x5d,
	0xd2, 0x21, 0x2b, 0xf3, 0x26, 0x05, 0xa4, 0x11, 0xde, 0x0c, 0x66, 0xc5, 0x54, 0x8e, 0x42, 0xca,
	0x2e, 0xfe, 0x04, 0x45, 0x07, 0x20, 0x81, 0x8c, 0x66, 0xfb, 0x9a, 0x4a, 0x04, 0x27, 0x0c, 0xd6,
	0x63, 0x13, 0xdd, 0x9a, 0xd7, 0x7b, 0x05, 0x62, 0xd2, 0xfd, 0x4c, 0xdd, 0xa9, 0xe8, 0x86, 0xc1,
	0x54, 0xb4, 0xd8, 0x78, 0x37, 0xac, 0xd6, 0x3e, 0x48, 0x48, 0xe1, 0x0b, 0xb5, 0x55, 0x55, 0x88,
	0x2f, 0xfc, 0x50, 0x3a, 0xc8, 0xe6, 0xbc, 0x59, 0xaa, 0x90, 0x8c, 0x94, 0x3e, 0x55, 0x9b, 0x55,
	0x25, 0x58, 0x10, 0xd2, 0x60, 0x9f, 0xdf, 0x2b, 0x35, 0xd2, 0xb7, 0x37, 0x74, 0xaa, 0x1c, 0xca,
	0xda, 0x42, 0xa7, 0xec, 0x28, 0x9e, 0xa8, 0x7b, 0x15, 0x85, 0x2c, 0x1e, 0xe7, 0xb6, 0x0d, 0x4e,
	0x9c, 0xef, 0x58, 0x9d, 0x21, 0x0b, 0x49, 0x6d, 0x7e, 0xae, 0x21, 0xf0, 0xc0, 0x81, 0x98, 0x94,
	0x9a, 0x0b, 0x73, 0x3d, 0x44, 0xd1, 0x0d, 0xc3, 0x97, 0x1b, 0x71, 0xd2, 0x51, 0x0b, 0xc3, 0xe7,
	0x27, 0x86, 0x1b, 0xc6, 0x53, 0x64, 0x3a, 0x65, 0x95, 0xd6, 0xc2, 0x78, 0x4e, 0x40, 0x42, 0x0a,
	0x8f, 0xd4, 0xe6, 0x99, 0x9f, 0x06, 0x17, 0xf8, 0xbe, 0x33, 0xf2, 0xc1, 0x0f, 0xb2, 0xc3, 0x58,
	0x27, 0x97, 0xb6, 0x61, 0x44, 0xbb, 0x28, 0x21, 0xbf, 0x01, 0xae, 0xd4, 0xf2, 0x21, 0x35, 0x87,
	0x33, 0x41, 0x9b, 0x5d, 0xa9, 0x41, 0x0f, 0x10, 0xc4, 0xbc, 0xd2, 0xd2, 0x32, 0xbc, 0x09, 0xce,
	0xcd, 0x46, 0xeb, 0x1a, 0x7c, 0xc8, 0x30, 0x64, 0x2a, 0xf7, 0xcb, 0x1e, 0xc4, 0xf8, 0xf4, 0x94,
	0x40, 0xaf, 0x59, 0x49, 0xf6, 0xdf, 0x96, 0xed, 0x07, 0xca, 0xc1, 0x9b, 0xb2, 0xae, 0xf3, 0x53,
	0xe5, 0x94, 0xad, 0x24, 0x1a, 0x22, 0xfc, 0xec, 0xec, 0x8a, 0xf6, 0x65, 0xcd, 0xb5, 0xed, 0x0f,
	0x51, 0x70, 0x70, 0x76, 0x35, 0xf8, 0xcb, 0xba, 0x5a, 0xe5, 0x77, 0x0f, 0xdc, 0x84, 0x7e, 0x92,
	0x4c, 0xc3, 0x11, 0xbf, 0x32, 0xcd, 0x1d, 0xe9, 0x36, 0xaa, 0x12, 0x4e, 0x0f, 0xc0, 0x93, 0x9d,
	0x16, 0xe3, 0x31, 0xb8, 0xea, 0xb9, 0xb3, 0xdd, 0xba, 0x80, 0x4c, 0xfa, 0xa1, 0x6a, 0x05, 0x61,
	0x9a, 0x5f, 0x0a, 0x85, 0x37, 0x83, 0x22, 0xc8, 0x26, 0x19, 0xe3, 0x54, 0x9b, 0x34, 0x45, 0x7c,
	0x36, 0x22, 0x2c, 0x86, 0xc0, 0x92, 0x40, 0xac, 0xe0, 0x45, 0xa8, 0xa6, 0x32, 0x1d, 0x0b, 0x33,
	0xf1, 0x77, 0x55, 0x37, 0xbb, 0x80, 0xdc, 0xb7, 0x52, 0x19, 0x9b, 0x77, 0x1b, 0xe1, 0xe7, 0xb6,
	0xc2, 0x8f, 0x55, 0x8f, 0x78, 0x7c, 0xfd, 0xc2, 0x44, 0xb6, 0xeb, 0x0e, 0xe2, 0xf4, 0x0e, 0x62,
	0xbb, 0x5e, 0x25, 0xb1, 0x21, 0xf3, 0xb5, 0x8d, 0xed, 0xdb, 0x45, 0x1a, 0xe6, 0x1a, 0xaf, 0xae,
	0x85, 0xc4, 0x86, 0xdb, 0xb1, 0xb0, 0xcd, 0xb5, 0x7c, 0x7c, 0x89, 0x35, 0x1d, 0x63, 0x53, 0x6d,
	0x31, 0x46, 0x94, 0xc1, 0x89, 0xea, 0x2e, 0xbc, 0xab, 0x61, 0xd0, 0x1f, 0xe3, 0xb1, 0x5c, 0xee,
	0x65, 0xf1, 0x1b, 0x1f, 0x84, 0x21, 0x07, 0x4a, 0x73, 0xf3, 0x80, 0x4d, 0x05, 0x0c, 0xa0, 0x51,
	0x01, 0x6e, 0x3d, 0x34, 0xde, 0xc6, 0x14, 0x07, 0xff, 0x51, 0x53, 0x0d, 0xf3, 0x08, 0x8c, 0xf7,
	0x3f, 0x49, 0x79, 0xff, 0x03, 0x9f, 0x78, 0xc4, 0xc7, 0xdd, 0x50, 0xc9, 0x2d, 0x6c, 0x99, 0x0e,
	0x41, 0xe5, 0x9a, 0x57, 0x2f, 0x80, 0xba, 0x15, 0x9c, 0xae, 0x81, 0x60, 0xa6, 0xe4, 0x85, 0xc0,
	0x0f, 0x82, 0x54, 0xf2, 0x0c, 0xc5, 0xd0, 0x0e, 0x20, 0x64, 0x2a, 0x72, 0xe5, 0x0f, 0xa7, 0x32,
	0xe8, 0xfe, 0x8a, 0x98, 0x0a, 0x83, 0x43, 0xc4, 0xd0, 0x12, 0xde, 0xc1, 0x94, 0x08, 0x83, 0x17,
	0xaf, 0x89, 0x08, 0x8b, 0xa1, 0x11, 0xba, 0x4e, 0x17, 0x39, 0xaf, 0x99, 0x22, 0x88, 0x09, 0x30,
	0xcb, 0xf4, 0x84, 0xeb, 0x8d, 0xce, 0xfc, 0x68, 0xa2, 0x65, 0xc1, 0x5a, 0x84, 0xed, 0x12, 0x84,
	0x13, 0x85, 0x3e, 0x11, 0x1f, 0x53, 0x24, 0x29, 0x95, 0x22, 0x4d, 0x2c, 0x12, 0x25, 0x21, 0xe5,
	0xc2, 0x8d, 0xb7, 0xf9, 0xad, 0x1b, 0x6f, 0xf3, 0x07, 0xff, 0xd0, 0x50, 0xed, 0xb9, 0xa7, 0x49,
	0xbe, 0xfa, 0x9c, 0x98, 0x30, 0x43, 0x57, 0x9f, 0x58, 0x42, 0x67, 0x11, 0x42, 0x86, 0xe6, 0xe3,
	0xe9, 0x7d, 0x04, 0xa7, 0xd3, 0x4c, 0xa6, 0xbe, 0x6d, 0xd0, 0x5d, 0x04, 0x71, 0xbc, 0x96, 0x06,
	0xab, 0x26, 0x8f, 0x71, 0x06, 0xda, 0x0f, 0xf8, 0x0e, 0xd3, 0xcf, 0x8b, 0xcc, 0xde, 0xee, 0x52,
	0x89, 0x4e, 0x9b, 0xfc, 0xe4, 0x07, 0x51, 0x0d, 0x76, 0x1e, 0x74, 0x49, 0x4b, 0x6a, 0xd7, 0xab,
	0x0a, 0x7e, 0x0d, 0x38, 0x46, 0xd2, 0xa4, 0x38, 0x85, 0xd5, 0x9c, 0x5e, 0x7a, 0xfe, 0x68, 0xa4,
	0xb3, 0x2c, 0x34, 0x39, 0x5e, 0xc3, 0x75, 0x8c, 0x68, 0xc7, 0x4a, 0x30, 0x9e, 0xcf, 0x8a, 0x69,
	0x1e, 0x7a, 0xfe, 0x95, 0x1c, 0x09, 0xd6, 0xa8, 0xbc, 0x73, 0xe5, 0xfc, 0x91, 0xfa, 0x00, 0x9c,
	0x67, 0x1c, 0x05, 0x70, 0x3a, 0xf0, 0xae, 0x77, 0x81, 0x2f, 0x80, 0xef, 0x5b, 0xca, 0xce, 0x62,
	0x5f, 0x30, 0xa3, 0xf5, 0xbd, 0x91, 0x4e, 0xf3, 0x70, 0x8c, 0xe6, 0xc5, 0x17, 0xc3, 0x98, 0xd1,
	0xfa, 0xbb, 0x25, 0x88, 0x8f, 0xf9, 0x78, 0x68, 0xf6, 0x66, 0x21, 0xac, 0x81, 0x27, 0xa9, 0xa2,
	0x57, 0x24, 0x93, 0xd4, 0x0f, 0xb4, 0x5c, 0x18, 0xdf, 0x43, 0xc6, 0x01, 0x12, 0x64, 0x37, 0x9d,
	0xb0, 0xd8, 0xf9, 0x85, 0x7a, 0x90, 0xa4, 0x1a, 0xfc, 0x13, 0xbe, 0xe0, 0xcc, 0x30, 0x49, 0xd6,
	0x11, 0x4d, 0xb1, 0xdc, 0x37, 0xf3, 0xea, 0x6e, 0x5b, 0xce, 0x41, 0x49, 0xf9, 0x73, 0xbe, 0x83,
	0xfe, 0x52, 0x6d, 0x61, 0x72, 0x07, 0x31, 0x1e, 0xf6, 0x2a, 0x66, 0xb2, 0x78, 0x3d, 0x4a, 0x57,
	0xb2, 0x9c, 0x6d, 0xdd, 0x61, 0xa9, 0x6b, 0x85, 0x74, 0x77, 0xfb, 0x95, 0xba, 0x57, 0xb6, 0x8b,
	0x66, 0x0f, 0xc7, 0x0c, 0x69, 0x92, 0x43, 0xc5, 0x5d, 0x2b, 0x7e, 0x4a, 0x52, 0x69, 0x0d, 0xf4,
	0x84, 0x9d, 0x6a, 0x7c, 0x02, 0xc3, 0xa1, 0x42, 0x24, 0x08, 0xe3, 0x40, 0x22, 0xc7, 0x5d, 0x16,
	0xbb, 0x46, 0x7a, 0x44, 0x42, 0xf4, 0x4d, 0x33, 0x3c, 0xca, 0xa5, 0x9e, 0xdd, 0xe0, 0x7c, 0x5d,
	0xdd, 0x61, 0xf8, 0xc4, 0x6c, 0x73, 0xf0, 0x9b, 0x74, 0x4b, 0x09, 0x7e, 0x2e, 0x38, 0xe5, 0x5d,
	0xde, 0x33, 0xe6, 0x48, 0xf0, 0xde, 0xa9, 0xb9, 0x09, 0x96, 0xc7, 0x4a, 0x7c, 0xf8, 0xe2, 0x4c,
	0xae, 0x29, 0xc8, 0x4e, 0xee, 0x7c, 0xa3, 0xfa, 0xf2, 0x12, 0x8e, 0xc9, 0xf7, 0x79, 0x88, 0x73,
	0xae, 0x31, 0x75, 0x4f, 0x32, 0xb9, 0x61, 0xd9, 0x12, 0xf9, 0x51, 0x29, 0xde, 0x07, 0x29, 0x9a,
	0xab, 0xd1, 0x84, 0x04, 0x39, 0xbd, 0x4c, 0xf0, 0x3d, 0x74, 0x93, 0x56, 0xb1, 0x27, 0x82, 0x67,
	0x06, 0xe7, 0x3d, 0xce, 0x64, 0xba, 0x09, 0xbd, 0x43, 0x5d, 0x6d, 0x09, 0x46, 0x97, 0xa1, 0xb0,
	0x3e, 0x89, 0x9f, 0x42, 0x97, 0x71, 0xf0, 0xe8, 0xa9, 0xc8, 0x63, 0xe0, 0x36, 0xb9, 0x4b, 0xe4,
	0x3b, 0x56, 0xba, 0x83, 0xc2, 0x21, 0x6f, 0x9a, 0x39, 0xad, 0x64, 0x92, 0x65, 0xd0, 0x19, 0x5c,
	0x3c, 0xbe, 0x7d, 0x69, 0x54, 0xb4, 0x8e, 0x40, 0xf8, 0x8c, 0x65, 0x78, 0x8f, 0x06, 0x07, 0x0e,
	0x73, 0x32, 0x95, 0xeb, 0x96, 0xca, 0x55, 0x14, 0xb8, 0x82, 0xc3, 0xcc, 0xfc, 0xef, 0xe1, 0xaa,
	0xd8, 0x7e, 0x0f, 0xfe, 0x69, 0x59, 0xb5, 0xe7, 0xa4, 0xb8, 0x9d, 0x75, 0x34, 0xc1, 0xd7, 0x24,
	0x71, 0x17, 0x5c, 0x5a, 0xf4, 0x03, 0xb5, 0x6b, 0x7e, 0xe0, 0x67, 0xea, 0x8e, 0x25, 0x80, 0x49,
	0xf2, 0xc3, 0x8e, 0xf5, 0x18, 0x8e, 0x91, 0xb9, 0x22, 0xda, 0xc7, 0xeb, 0xc7, 0x66, 0x6e, 0x2e,
	0xc8, 0xc4, 0x79, 0x94, 0x40, 0xf5, 0x38, 0xb6, 0x42, 0x49, 0x83, 0x3d, 0x8e, 0x41, 0x17, 0x8b,
	0x84, 0x4c, 0x9d, 0xcf, 0x80, 0x52, 0xa2, 0x4b, 0x64, 0xbc, 0x28, 0x4b, 0x0a, 0x8e, 0xa5, 0x2b,
	0x14, 0x80, 0x76, 0xa1, 0xe8, 0x3c, 0x57, 0x5d, 0x80, 0xbd, 0x6a, 0xd2, 0xcd, 0x8f, 0x65, 0x1f,
	0x2e, 0xcc, 0x12, 0x64, 0xe7, 0x27, 0x25, 0xc9, 0xed, 0x80, 0x56, 0xa5, 0xec, 0x1c, 0xa9, 0x4d,
	0x7c, 0x66, 0x07, 0xb7, 0xa2, 0x69, 0xf5, 0x61, 0xf3, 0x17, 0xe2, 0x20, 0x5a, 0x8f, 0x1f, 0x2e,
	0xd4, 0xf5, 0x12, 0x98, 0x3b, 0x4c, 0x3c, 0x20, 0x9e, 0xbb, 0x31, 0x5d, 0x84, 0x20, 0xdb, 0x31,
	0xff, 0x81, 0x28, 0xaa, 0xe4, 0xee, 0x42, 0x25, 0x0b, 0x3f, 0x83, 0x7c, 0xa2, 0x56, 0x72, 0x3f,
	0x7b, 0x93, 0x5d, 0xbf, 0x8f, 0x20, 0xf6, 0x31, 0xca, 0x5c, 0xa6, 0xc0, 0xe6, 0x5b, 0xc6, 0x5c,
	0x82, 0x1c, 0xc2, 0xdc, 0x15, 0x11, 0xaf, 0x38, 0x88, 0x5c, 0x22, 0x40, 0x9e, 0xb9, 0x16, 0x84,
	0xd9, 0x1b, 0xd8, 0x26, 0xb0, 0x9b, 0xeb, 0x37, 0x74, 0x62, 0x0f, 0xa4, 0xfb, 0x87, 0xee, 0x2a,
	0xb2, 0xf6, 0x63, 0x7c, 0x8a, 0xde, 0xbc, 0x61, 0xb6, 0x30, 0x7a, 0xd1, 0xb1, 0x83, 0x4c, 0xa7,
	0xe6, 0x72, 0x01, 0xe3, 0x3d, 0x64, 0xda, 0x64, 0x31, 0x35, 0x17, 0x3f, 0x29, 0x64, 0xf0, 0x4f,
	0x5c, 0x75, 0x02, 0xcd, 0x2f, 0x5b, 0x90, 0x6a, 0x60, 0x20, 0x24, 0x5b, 0xa8, 0xb9, 0xf4, 0x8d,
	0x18, 0x1e, 0x47, 0xc4, 0x06, 0xe8, 0x1b, 0x31, 0x74, 0x27, 0xb4, 0xfc, 0x80, 0xe1, 0x37, 0xb6,
	0xcd, 0xbf, 0x93, 0xac, 0x71, 0xdb, 0x54, 0xe0, 0x78, 0x0a, 0x49, 0x3b, 0xad, 0x76, 0xcd, 0xe5,
	0x02, 0xdd, 0x63, 0xc0, 0x99, 0x81, 0x96, 0x0d, 0xf4, 0xf1, 0x7b, 0xf0, 0x17, 0x6a, 0xeb, 0xe6,
	0x45, 0x43, 0x43, 0x1c, 0x87, 0xe3, 0x5c, 0xeb, 0x48, 0xc6, 0x65, 0x8a, 0x94, 0x1a, 0x41, 0xea,
	0x24, 0x43, 0xa3, 0x6f, 0x7a, 0xdd, 0x8a, 0xb4, 0x0c, 0x0c, 0x3f, 0x07, 0xff, 0x59, 0x57, 0xad,
	0xca, 0x52, 0xa2, 0xd9, 0xdb, 0xc4, 0xcc, 0xbc, 0x54, 0x58, 0x00, 0x1d, 0xe1, 0x59, 0x81, 0xee,
	0x0b, 0x3a, 0x90, 0x51, 0x1a, 0x29, 0x09, 0x6d, 0x1b, 0xe1, 0x23, 0x44, 0x31, 0x8b, 0x5c, 0xe0,
	0xa5, 0xd9, 0x79, 0x20, 0x49, 0x57, 0xc9, 0x73, 0x01, 0x5c, 0xe0, 0x65, 0x45, 0x9a, 0x48, 0x76,
	0x5b, 0xf2, 0x86, 0x00, 0xe2, 0x9a, 0x50, 0x1a, 0x1b, 0x48, 0x52, 0x24, 0xa5, 0x45, 0x7d, 0x3c,
	0x7f, 0xac, 0x2e, 0xea, 0xe3, 0xd9, 0x03, 0xe7, 0x02, 0x3b, 0xcb, 0x09, 0x11, 0x7d, 0x63, 0x92,
	0x5b, 0xd1, 0xe5, 0xe5, 0xe1, 0x74, 0xa8, 0x63, 0x95, 0xf9, 0x8f, 0x1f, 0xc8, 0x00, 0xc3, 0x88,
	0x13, 0x51, 0x49, 0x5e, 0x6d, 0x19, 0x3d, 0x4f, 0x42, 0x9e, 0x16, 0x9d, 0x9d, 0xc9, 0x5a, 0x15,
	0x42, 0x74, 0xe9, 0x93, 0xe1, 0x22, 0x53, 0x26, 0x2f, 0x07, 0x29, 0x2e, 0xe0, 0x80, 0x66, 0xe0,
	0x77, 0x61, 0x40, 0x1c, 0x10, 0xa5, 0x84, 0xb8, 0x34, 0xc4, 0x57, 0x0f, 0x52, 0x2a, 0x0d, 0x88,
	0x03, 0x9a, 0x18, 0x10, 0x0c, 0x2b, 0x83, 0xec, 0x40, 0xce, 0x3a, 0xf4, 0x8d, 0x06, 0x21, 0x87,
	0x0b, 0xb9, 0x66, 0x30, 0xc5, 0xc1, 0xdf, 0x2d, 0x29, 0x55, 0xee, 0x43, 0x1c, 0x55, 0x36, 0xd5,
	0x3a, 0xc1, 0x44, 0x8f, 0x17, 0xda, 0x96, 0xb1, 0x1b, 0x57, 0xf1, 0xec, 0x34, 0x34, 0xcb, 0x2b,
	0x25, 0xf9, 0x1d, 0x83, 0x7e, 0xb4, 0x91, 0x24, 0x5a, 0x8a, 0x28, 0x81, 0x00, 0x43, 0x23, 0x5a,
	0x96, 0xf7, 0x29, 0x2e, 0x96, 0x5d, 0x5f, 0xa9, 0x76, 0x1d, 0xbb, 0x39, 0xf7, 0xf3, 0x8f, 0x29,
	0x0e, 0x0e, 0x54, 0xd3, 0xba, 0x80, 0xca, 0xc2, 0x2f, 0xcd, 0x2d, 0xbc, 0xad, 0xb4, 0xb6, 0x30,
	0x1f, 0xb4, 0xcc, 0xf5, 0x72, 0x99, 0x07, 0xbf, 0xad, 0x89, 0x81, 0xb3, 0x9b, 0xb0, 0x06, 0xfe,
	0xcb, 0xd3, 0xa3, 0xa1, 0x6c, 0x99, 0x12, 0x40, 0x29, 0xde, 0x59, 0xee, 0x1f, 0x66, 0x20, 0xe5,
	0x9d, 0x53, 0x02, 0xd8, 0xaa, 0x4f, 0x3e, 0x80, 0x37, 0x10, 0x17, 0x70, 0x22, 0x91, 0x42, 0x15,
	0xb2, 0x73, 0xb0, 0x65, 0xca, 0x6f, 0xd3, 0xb7, 0x33, 0x90, 0xb0, 0x8b, 0x90, 0x12, 0x39, 0x09,
	0xf0, 0x4d, 0xd6, 0x49, 0xc0, 0x37, 0xde, 0xbb, 0xf8, 0xe7, 0x13, 0xc8, 0x94, 0x0b, 0xfd, 0x12,
	0xb6, 0x33, 0xbb, 0x8a, 0x2a, 0x84, 0xdb, 0x37, 0x4f, 0x32, 0x71, 0x17, 0xf8, 0xc9, 0xf9, 0x33,
	0xb6, 0x25, 0xee, 0x42, 0x4a, 0x88, 0x07, 0xfa, 0x1c, 0xdd, 0x08, 0xe7, 0xea, 0x52, 0xa2, 0xe4,
	0x9e, 0x07, 0x4b, 0xf6, 0x58, 0x73, 0x4d, 0x11, 0x47, 0x21, 0x97, 0x7c, 0x57, 0x64, 0x93, 0x30,
	0x0a, 0x53, 0xa6, 0x5f, 0x0d, 0x78, 0x14, 0x6d, 0x6e, 0x85, 0x4b, 0xf8, 0x4b, 0x19, 0xa9, 0xf3,
	0x74, 0x75, 0x48, 0x56, 0x41, 0x3e, 0xf1, 0x94, 0x2a, 0x7f, 0x62, 0xc4, 0x1f, 0x87, 0x8e, 0x5e,
	0xfc, 0x6a, 0xb8, 0xbf, 0xbb, 0xf3, 0xd2, 0x1b, 0xfe, 0x6a, 0x78, 0xfc, 0xec, 0xa0, 0xf7, 0x03,
	0xfc, 0xc3, 0xe8, 0xf5, 0xbe, 0x7b, 0x7c, 0x52, 0x62, 0x4b, 0xce, 0x5d, 0xb5, 0xb1, 0x73, 0xb0,
	0xf3, 0xeb, 0xc3, 0x57, 0x9e, 0xbb, 0x37, 0x34, 0x70, 0xcd, 0xd9, 0x50, 0xed, 0x17, 0xcf, 0xdc,
	0xc3, 0x5f, 0x9e, 0x18, 0xa8, 0x7e, 0xba, 0x4a, 0x3f, 0x38, 0x7f, 0xf1, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x84, 0x6d, 0xc1, 0x80, 0xfb, 0x2c, 0x00, 0x00,
}
